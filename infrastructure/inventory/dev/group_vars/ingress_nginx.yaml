---
# Ingress-NGINX Controller Configuration
# Handles HTTP/HTTPS traffic routing for the K3s cluster

# Ingress-NGINX version and chart settings
ingress_nginx_version: "v1.9.5"
ingress_nginx_chart_version: "4.8.4"
ingress_nginx_namespace: "ingress-nginx"
ingress_nginx_create_namespace: true

# Helm repository
ingress_nginx_chart_repo: "https://kubernetes.github.io/ingress-nginx"
ingress_nginx_chart_name: "ingress-nginx/ingress-nginx"

# Controller configuration
ingress_nginx_controller:
  name: "ingress-nginx-controller"
  image:
    registry: "registry.k8s.io"
    image: "ingress-nginx/controller"
    tag: "v1.9.5"
    digest: ""
  
  # Service configuration
  service:
    type: "LoadBalancer"
    loadBalancerIP: "192.168.1.201"  # Fixed IP from MetalLB pool
    annotations:
      metallb.universe.tf/address-pool: "default-pool"
      metallb.universe.tf/allow-shared-ip: "ingress-nginx"
    
    # Port configuration
    ports:
      http: 80
      https: 443
    targetPorts:
      http: http
      https: https
    
    # External traffic policy
    externalTrafficPolicy: "Local"
    sessionAffinity: "None"

  # Resource limits
  resources:
    limits:
      cpu: "1000m"
      memory: "1Gi"
    requests:
      cpu: "100m"
      memory: "90Mi"

  # Replica configuration
  replicaCount: 2
  minAvailable: 1
  
  # Node selection
  nodeSelector:
    kubernetes.io/arch: "amd64"  # Prefer x86 nodes for better performance
  
  # Tolerations
  tolerations:
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Exists"
      effect: "NoSchedule"

  # Affinity rules
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: "app.kubernetes.io/name"
                  operator: "In"
                  values: ["ingress-nginx"]
            topologyKey: "kubernetes.io/hostname"

# Configuration settings
ingress_nginx_config:
  # SSL/TLS settings
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
  ssl-prefer-server-ciphers: "true"
  ssl-session-cache: "shared:SSL:10m"
  ssl-session-timeout: "10m"
  
  # Security headers
  enable-real-ip: "true"
  forwarded-for-header: "X-Forwarded-For"
  compute-full-forwarded-for: "true"
  use-forwarded-headers: "true"
  
  # Performance settings
  worker-processes: "auto"
  worker-connections: "1024"
  max-worker-connections: "16384"
  max-worker-open-files: "65536"
  
  # Proxy settings
  proxy-connect-timeout: "5"
  proxy-send-timeout: "60"
  proxy-read-timeout: "60"
  proxy-body-size: "1m"
  
  # Rate limiting
  rate-limit: "100"
  rate-limit-window: "1m"
  
  # Logging
  log-format-json: "true"
  access-log-path: "/var/log/nginx/access.log"
  error-log-path: "/var/log/nginx/error.log"

# Default backend configuration
ingress_nginx_default_backend:
  enabled: true
  name: "default-backend"
  image:
    registry: "registry.k8s.io"
    image: "defaultbackend-amd64"
    tag: "1.5"
  
  resources:
    limits:
      cpu: "10m"
      memory: "20Mi"
    requests:
      cpu: "10m"
      memory: "20Mi"

# Admission webhooks
ingress_nginx_admission_webhooks:
  enabled: true
  failurePolicy: "Fail"
  port: 8443
  
  # Certificate configuration
  certificate: "/usr/local/certificates/cert"
  key: "/usr/local/certificates/key"
  ca: "/usr/local/certificates/ca"

# Metrics and monitoring
ingress_nginx_metrics:
  enabled: true
  port: 10254
  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "10254"
      prometheus.io/path: "/metrics"

# Service monitor for Prometheus
ingress_nginx_service_monitor:
  enabled: true
  namespace: "monitoring"
  labels:
    app: "ingress-nginx"
  interval: "30s"
  scrapeTimeout: "10s"

# Pod disruption budget
ingress_nginx_pdb:
  enabled: true
  minAvailable: 1

# Security context
ingress_nginx_security_context:
  runAsUser: 101
  runAsGroup: 82
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE

# Ingress class configuration
ingress_nginx_ingress_class:
  name: "nginx"
  enabled: true
  default: true
  controllerValue: "k8s.io/ingress-nginx"

# Additional configurations
ingress_nginx_tcp_services: {}
ingress_nginx_udp_services: {}

# Custom error pages
ingress_nginx_custom_error_pages:
  enabled: false
  
# ModSecurity WAF (disabled by default)
ingress_nginx_modsecurity:
  enabled: false 