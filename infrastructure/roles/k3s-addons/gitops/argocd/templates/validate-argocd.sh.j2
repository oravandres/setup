#!/bin/bash
# ArgoCD v2.11 GitOps Platform Validation Script
# Tests ArgoCD components, Image Updater, TLS ingress, and GitOps functionality
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

echo "=== ArgoCD v2.11 GitOps Platform Validation ==="
echo "ArgoCD Version: {{ argocd_version | default('v2.11.0') }}"
echo "Chart Version: {{ argocd_chart_version | default('7.4.1') }}"
echo "Image Updater: {{ argocd_image_updater_enabled | default(true) }}"
echo "Domain: {{ argocd_domain | default('argocd.local') }}"
echo "Timestamp: $(date)"
echo "Node: $(hostname)"
echo

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test results
TESTS_PASSED=0
TESTS_FAILED=0

# Function to run test
run_test() {
    local test_name="$1"
    local test_command="$2"
    echo -n "Testing $test_name... "
    
    if eval "$test_command" &>/dev/null; then
        echo -e "${GREEN}PASS${NC}"
        ((TESTS_PASSED++))
        return 0
    else
        echo -e "${RED}FAIL${NC}"
        ((TESTS_FAILED++))
        return 1
    fi
}

# Function to run info test (always passes, just shows info)
run_info() {
    local test_name="$1"
    local test_command="$2"
    echo -n "Checking $test_name... "
    
    local result
    result=$(eval "$test_command" 2>/dev/null || echo "Not available")
    echo -e "${BLUE}$result${NC}"
}

# Function to show detailed info
show_info() {
    echo -e "\n${YELLOW}=== ArgoCD System Information ===${NC}"
    
    echo -e "\n${YELLOW}ArgoCD Namespace:${NC}"
    kubectl get namespace argocd 2>/dev/null || echo "argocd namespace not found"
    
    echo -e "\n${YELLOW}ArgoCD Pods:${NC}"
    kubectl get pods -n argocd -o wide 2>/dev/null || echo "No ArgoCD pods found"
    
    echo -e "\n${YELLOW}ArgoCD Services:${NC}"
    kubectl get services -n argocd 2>/dev/null || echo "No ArgoCD services found"
    
    echo -e "\n${YELLOW}ArgoCD Deployments:${NC}"
    kubectl get deployments -n argocd -o wide 2>/dev/null || echo "No ArgoCD deployments found"
    
    echo -e "\n${YELLOW}ArgoCD Applications:${NC}"
    kubectl get applications -n argocd -o wide 2>/dev/null || echo "No Applications found"
    
    echo -e "\n${YELLOW}ArgoCD Projects:${NC}"
    kubectl get appprojects -n argocd -o wide 2>/dev/null || echo "No AppProjects found"
    
    echo -e "\n${YELLOW}Ingress Resources:${NC}"
    kubectl get ingress -n argocd -o wide 2>/dev/null || echo "No Ingress resources found"
    
    echo -e "\n${YELLOW}TLS Certificates:${NC}"
    kubectl get certificates -n argocd -o wide 2>/dev/null || echo "No certificates found"
    
    echo -e "\n${YELLOW}Recent ArgoCD Events:${NC}"
    kubectl get events -n argocd --sort-by='.lastTimestamp' | tail -10 2>/dev/null || echo "No events found"
}

echo "=== Running ArgoCD GitOps Platform Tests ==="

# Section 1: Core ArgoCD Tests
echo -e "\n${YELLOW}=== Core ArgoCD Tests ===${NC}"

run_test "ArgoCD namespace exists" \
    "kubectl get namespace argocd"

run_test "ArgoCD server pods are running" \
    "kubectl get pods -n argocd -l app.kubernetes.io/component=server -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

run_test "ArgoCD application controller is running" \
    "kubectl get pods -n argocd -l app.kubernetes.io/component=application-controller -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

run_test "ArgoCD repository server is running" \
    "kubectl get pods -n argocd -l app.kubernetes.io/component=repo-server -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

run_test "ArgoCD applicationset controller is running" \
    "kubectl get pods -n argocd -l app.kubernetes.io/component=applicationset-controller -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

run_test "ArgoCD notifications controller is running" \
    "kubectl get pods -n argocd -l app.kubernetes.io/component=notifications-controller -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

run_test "ArgoCD Redis is running" \
    "kubectl get pods -n argocd -l app.kubernetes.io/component=redis -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

# Section 2: ArgoCD Image Updater Tests
{% if argocd_image_updater_enabled | default(true) | bool %}
echo -e "\n${YELLOW}=== ArgoCD Image Updater Tests ===${NC}"

run_test "ArgoCD Image Updater pods are running" \
    "kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-image-updater -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

run_test "ArgoCD Image Updater deployment is ready" \
    "kubectl get deployment argocd-image-updater -n argocd -o jsonpath='{.status.readyReplicas}' | grep -q '[1-9]'"

run_test "ArgoCD Image Updater has valid configuration" \
    "kubectl get configmap argocd-image-updater-config -n argocd"

run_test "ArgoCD Image Updater logs show no critical errors" \
    "! kubectl logs -n argocd deployment/argocd-image-updater --tail=50 | grep -i 'error.*fatal'"
{% endif %}

# Section 3: Service and Networking Tests
echo -e "\n${YELLOW}=== Service and Networking Tests ===${NC}"

run_test "ArgoCD server service exists" \
    "kubectl get service argocd-server -n argocd"

run_test "ArgoCD server service has endpoints" \
    "kubectl get endpoints argocd-server -n argocd -o jsonpath='{.subsets[*].addresses[*].ip}' | grep -q '[0-9]'"

{% if create_ingress | default(true) | bool %}
run_test "ArgoCD ingress exists" \
    "kubectl get ingress argocd-server-ingress -n argocd"

run_test "ArgoCD ingress has TLS configuration" \
    "kubectl get ingress argocd-server-ingress -n argocd -o jsonpath='{.spec.tls[0].secretName}' | grep -q 'argocd-server-tls'"

run_test "ArgoCD TLS certificate exists" \
    "kubectl get secret argocd-server-tls -n argocd"
{% endif %}

# Section 4: ArgoCD API and Configuration Tests
echo -e "\n${YELLOW}=== ArgoCD API and Configuration Tests ===${NC}"

run_test "ArgoCD server API is responding" \
    "kubectl exec -n argocd deployment/argocd-server -- argocd version --server localhost:8080 --insecure --plaintext"

run_test "ArgoCD CRDs are installed" \
    "kubectl get crd applications.argoproj.io appprojects.argoproj.io applicationsets.argoproj.io"

run_test "ArgoCD default project exists" \
    "kubectl get appproject default -n argocd"

run_test "ArgoCD server configuration is valid" \
    "kubectl get configmap argocd-cm -n argocd"

run_test "ArgoCD RBAC configuration exists" \
    "kubectl get configmap argocd-rbac-cm -n argocd"

# Section 5: Authentication Tests
echo -e "\n${YELLOW}=== Authentication Tests ===${NC}"

{% if not argocd_oidc_enabled | default(false) | bool %}
run_test "ArgoCD admin secret exists" \
    "kubectl get secret argocd-initial-admin-secret -n argocd"

run_test "ArgoCD admin password is set" \
    "kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' | base64 -d | wc -c | grep -q '[1-9]'"
{% else %}
run_test "ArgoCD OIDC client secret exists" \
    "kubectl get secret argocd-oidc-secret -n argocd"

run_test "ArgoCD OIDC configuration is present" \
    "kubectl get configmap argocd-cm -n argocd -o jsonpath='{.data.oidc\.config}' | grep -q 'issuer'"
{% endif %}

# Section 6: Monitoring and Metrics Tests
echo -e "\n${YELLOW}=== Monitoring and Metrics Tests ===${NC}"

run_test "ArgoCD server metrics endpoint responds" \
    "kubectl exec -n argocd deployment/argocd-server -- wget -q -O- http://localhost:8083/metrics | grep -q 'argocd_'"

run_test "ArgoCD application controller metrics endpoint responds" \
    "kubectl exec -n argocd deployment/argocd-application-controller -- wget -q -O- http://localhost:8082/metrics | grep -q 'argocd_'"

run_test "ArgoCD repository server metrics endpoint responds" \
    "kubectl exec -n argocd deployment/argocd-repo-server -- wget -q -O- http://localhost:8084/metrics | grep -q 'argocd_'"

# Check for ServiceMonitors if Prometheus operator is available
if kubectl get crd servicemonitors.monitoring.coreos.com &>/dev/null; then
    run_test "ArgoCD ServiceMonitors exist" \
        "kubectl get servicemonitor -n argocd | grep -q argocd"
fi

# Section 7: Sample Application Tests (if created)
{% if create_sample_app | default(false) | bool %}
echo -e "\n${YELLOW}=== Sample Application Tests ===${NC}"

run_test "Sample ArgoCD application exists" \
    "kubectl get application sample-app -n argocd"

run_test "Sample application is synced" \
    "kubectl get application sample-app -n argocd -o jsonpath='{.status.sync.status}' | grep -q 'Synced'"

run_test "Sample application is healthy" \
    "kubectl get application sample-app -n argocd -o jsonpath='{.status.health.status}' | grep -q 'Healthy'"
{% endif %}

# Section 8: System Information
echo -e "\n${YELLOW}=== System Information ===${NC}"

run_info "ArgoCD server version" \
    "kubectl exec -n argocd deployment/argocd-server -- argocd version --server localhost:8080 --insecure --plaintext --short | head -1"

run_info "Number of ArgoCD applications" \
    "kubectl get applications -n argocd --no-headers | wc -l"

run_info "Number of ArgoCD projects" \
    "kubectl get appprojects -n argocd --no-headers | wc -l"

{% if argocd_image_updater_enabled | default(true) | bool %}
run_info "ArgoCD Image Updater version" \
    "kubectl get deployment argocd-image-updater -n argocd -o jsonpath='{.spec.template.spec.containers[0].image}' | cut -d: -f2"
{% endif %}

run_info "ArgoCD server URL" \
    "echo 'https://{{ argocd_domain | default('argocd.local') }}'"

run_info "ArgoCD server pods ready" \
    "kubectl get deployment argocd-server -n argocd -o jsonpath='{.status.readyReplicas}/{.status.replicas}'"

run_info "ArgoCD application controller pods ready" \
    "kubectl get deployment argocd-application-controller -n argocd -o jsonpath='{.status.readyReplicas}/{.status.replicas}'"

echo
echo "=== Test Summary ==="
echo -e "Tests passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Tests failed: ${RED}$TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "\n${GREEN}✅ All ArgoCD GitOps platform tests passed!${NC}"
    echo -e "${GREEN}🚀 ArgoCD GitOps platform is ready for production use${NC}"
    show_info
    
    echo -e "\n${YELLOW}GitOps Next Steps:${NC}"
    echo "1. Access ArgoCD UI: https://{{ argocd_domain | default('argocd.local') }}"
    {% if not argocd_oidc_enabled | default(false) | bool %}
    echo "2. Login with admin/{{ argocd_admin_password | default('admin123!') }} and change password"
    {% else %}
    echo "2. Login via Keycloak OIDC"
    {% endif %}
    echo "3. Connect your Git repositories for GitOps"
    echo "4. Create Application resources for your workloads"
    echo "5. Configure Image Updater annotations for automatic updates"
    echo "6. Set up Git webhooks for faster sync times"
    
    exit 0
else
    echo -e "\n${RED}❌ Some ArgoCD GitOps platform tests failed!${NC}"
    echo -e "${RED}🚨 Review the issues above before proceeding${NC}"
    show_info
    exit 1
fi 