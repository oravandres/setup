#!/bin/bash

# Chaos Testing Validation Script (LitmusChaos)
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
NAMESPACE="{{ chaos_namespace | default('litmus') }}"
MONITORING_NAMESPACE="monitoring"
LITMUS_VERSION="{{ litmus_version | default('3.9.0') }}"
CONTROL_PLANE_TESTS="{{ enable_control_plane_tests | default(true) }}"
STORAGE_TESTS="{{ enable_storage_tests | default(true) }}"
ETCD_BACKUP_TESTS="{{ enable_etcd_backup_tests | default(true) }}"
SCHEDULED_CHAOS="{{ enable_scheduled_chaos | default(true) }}"

echo -e "${BLUE}=== Chaos Testing Validation ===${NC}"
echo "Validating LitmusChaos deployment and experiment configuration..."
echo ""

# Test counters
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Test function
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="${3:-0}"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "Testing $test_name... "
    
    if eval "$test_command" >/dev/null 2>&1; then
        local result=$?
        if [ $result -eq $expected_result ]; then
            echo -e "${GREEN}✓ PASS${NC}"
            PASSED_TESTS=$((PASSED_TESTS + 1))
        else
            echo -e "${RED}✗ FAIL${NC} (unexpected exit code: $result)"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        fi
    else
        echo -e "${RED}✗ FAIL${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
}

# Detailed test function with output
run_detailed_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="${3:-0}"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -e "${YELLOW}Testing $test_name...${NC}"
    
    if output=$(eval "$test_command" 2>&1); then
        local result=$?
        if [ $result -eq $expected_result ]; then
            echo -e "${GREEN}✓ PASS${NC}"
            PASSED_TESTS=$((PASSED_TESTS + 1))
            echo "$output" | head -5
        else
            echo -e "${RED}✗ FAIL${NC} (unexpected exit code: $result)"
            FAILED_TESTS=$((FAILED_TESTS + 1))
            echo "$output" | head -10
        fi
    else
        echo -e "${RED}✗ FAIL${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        echo "$output" | head -10
    fi
    echo ""
}

echo -e "${BLUE}1. LitmusChaos Infrastructure Tests${NC}"
echo "================================================"

# Test namespace
run_test "Chaos namespace exists" \
    "kubectl get namespace $NAMESPACE"

# Test LitmusChaos operator
run_test "LitmusChaos operator deployment" \
    "kubectl get deployment chaos-operator-ce -n $NAMESPACE"

run_test "LitmusChaos operator ready" \
    "kubectl wait --for=condition=Available deployment/chaos-operator-ce -n $NAMESPACE --timeout=60s"

# Test LitmusChaos components
run_test "Chaos exporter deployment" \
    "kubectl get deployment chaos-exporter -n $NAMESPACE"

run_test "Litmus portal frontend" \
    "kubectl get deployment litmusportal-frontend -n $NAMESPACE"

run_test "Litmus portal server" \
    "kubectl get deployment litmusportal-server -n $NAMESPACE"

# Test RBAC
run_test "LitmusChaos service account" \
    "kubectl get serviceaccount litmus-admin -n $NAMESPACE"

run_test "Chaos testing cluster role" \
    "kubectl get clusterrole chaos-testing-role"

run_test "Chaos testing cluster role binding" \
    "kubectl get clusterrolebinding chaos-testing-binding"

echo ""
echo -e "${BLUE}2. Chaos Experiment Configuration Tests${NC}"
echo "================================================"

# Test experiments ConfigMap
run_test "Chaos experiments ConfigMap" \
    "kubectl get configmap chaos-experiments-config -n $NAMESPACE"

# Test ChaosExperiment CRDs
run_test "ChaosExperiment CRD" \
    "kubectl get crd chaosexperiments.litmuschaos.io"

run_test "ChaosEngine CRD" \
    "kubectl get crd chaosengines.litmuschaos.io"

run_test "ChaosResult CRD" \
    "kubectl get crd chaosresults.litmuschaos.io"

# Test experiment availability
run_detailed_test "Available ChaosExperiments" \
    "kubectl get chaosexperiments -n $NAMESPACE"

echo -e "${BLUE}3. Control Plane Experiment Tests${NC}"
echo "================================================"

if [ "$CONTROL_PLANE_TESTS" = "true" ]; then
    # Test control plane experiments
    run_test "Node restart experiment exists" \
        "kubectl get chaosengine node-restart-master -n $NAMESPACE || echo 'Not deployed yet - OK'"
    
    run_test "etcd kill experiment exists" \
        "kubectl get chaosengine etcd-kill-experiment -n $NAMESPACE || echo 'Not deployed yet - OK'"
    
    run_test "API server kill experiment exists" \
        "kubectl get chaosengine api-server-kill -n $NAMESPACE || echo 'Not deployed yet - OK'"
    
    # Test target resources exist
    run_test "Master nodes available for testing" \
        "kubectl get nodes -l node-role.kubernetes.io/control-plane --no-headers | wc -l | grep -v '^0$'"
    
    run_test "etcd pods available for testing" \
        "kubectl get pods -n kube-system -l component=etcd --no-headers | wc -l | grep -v '^0$'"
    
    run_test "API server pods available for testing" \
        "kubectl get pods -n kube-system -l component=kube-apiserver --no-headers | wc -l | grep -v '^0$'"
    
    # Test VIP accessibility (for failover tests)
    run_test "Control plane VIP accessible" \
        "curl -k -s --connect-timeout 5 https://10.0.0.10:6443/healthz | grep -q ok"
    
    # Test HAProxy stats (if available)
    run_test "HAProxy stats accessible" \
        "curl -s --connect-timeout 5 http://10.0.0.10:8404/stats | grep -q 'Statistics Report' || echo 'HAProxy stats not accessible - may be OK'"
else
    echo "Control plane tests disabled - skipping"
fi

echo ""
echo -e "${BLUE}4. Storage Experiment Tests${NC}"
echo "================================================"

if [ "$STORAGE_TESTS" = "true" ]; then
    # Test Longhorn availability
    run_test "Longhorn system namespace" \
        "kubectl get namespace longhorn-system"
    
    run_test "Longhorn manager pods" \
        "kubectl get pods -n longhorn-system -l app=longhorn-manager --no-headers | wc -l | grep -v '^0$'"
    
    run_test "Longhorn storage nodes" \
        "kubectl get nodes -l node.longhorn.io/create-default-disk=true --no-headers | wc -l | grep -v '^0$'"
    
    run_test "Longhorn storage class" \
        "kubectl get storageclass longhorn"
    
    # Test existing volumes
    run_detailed_test "Longhorn volumes status" \
        "kubectl get volumes.longhorn.io -n longhorn-system -o custom-columns=NAME:.metadata.name,STATE:.status.state --no-headers"
    
    # Test storage experiments
    run_test "Longhorn node restart experiment exists" \
        "kubectl get chaosengine longhorn-node-restart -n $NAMESPACE || echo 'Not deployed yet - OK'"
    
    run_test "Disk fill experiment exists" \
        "kubectl get chaosengine disk-fill-storage -n $NAMESPACE || echo 'Not deployed yet - OK'"
else
    echo "Storage tests disabled - skipping"
fi

echo ""
echo -e "${BLUE}5. etcd Backup Validation Tests${NC}"
echo "================================================"

if [ "$ETCD_BACKUP_TESTS" = "true" ]; then
    # Test etcd backup system
    run_test "etcd backup namespace" \
        "kubectl get namespace etcd-backup || echo 'etcd-backup namespace not found - may be OK'"
    
    run_test "etcd backup CronJob" \
        "kubectl get cronjob -n etcd-backup etcd-backup-cronjob || echo 'etcd backup CronJob not found - may be OK'"
    
    # Test etcd accessibility
    run_test "etcd pods accessible" \
        "kubectl get pods -n kube-system -l component=etcd --no-headers | head -1 | awk '{print \$1}' | xargs -I {} kubectl exec -n kube-system {} -- etcdctl version"
    
    # Test backup validation experiment
    run_test "etcd backup restore validation experiment exists" \
        "kubectl get chaosengine etcd-backup-restore-validation -n $NAMESPACE || echo 'Not deployed yet - OK'"
    
    # Test backup directory accessibility
    run_detailed_test "etcd snapshot directory" \
        "kubectl get pods -n kube-system -l component=etcd --no-headers | head -1 | awk '{print \$1}' | xargs -I {} kubectl exec -n kube-system {} -- ls -la /var/lib/rancher/k3s/server/db/snapshots/ | head -5"
else
    echo "etcd backup tests disabled - skipping"
fi

echo ""
echo -e "${BLUE}6. Scheduled Chaos Tests${NC}"
echo "================================================"

if [ "$SCHEDULED_CHAOS" = "true" ]; then
    # Test chaos scheduler
    run_test "Chaos experiment scheduler CronJob" \
        "kubectl get cronjob chaos-experiment-scheduler -n $NAMESPACE"
    
    run_detailed_test "Chaos scheduler configuration" \
        "kubectl get cronjob chaos-experiment-scheduler -n $NAMESPACE -o jsonpath='{.spec.schedule}'"
    
    # Test scheduler permissions
    run_test "Chaos scheduler service account" \
        "kubectl get serviceaccount litmus-admin -n $NAMESPACE"
    
    # Test recent jobs (if any)
    run_detailed_test "Recent chaos scheduler jobs" \
        "kubectl get jobs -n $NAMESPACE -l job-name=chaos-experiment-scheduler --sort-by=.metadata.creationTimestamp | tail -5"
else
    echo "Scheduled chaos disabled - skipping"
fi

echo ""
echo -e "${BLUE}7. Monitoring Integration Tests${NC}"
echo "================================================"

# Test ServiceMonitor
run_test "LitmusChaos ServiceMonitor" \
    "kubectl get servicemonitor litmus-chaos-metrics -n $NAMESPACE"

# Test PrometheusRule
run_test "Chaos experiment PrometheusRule" \
    "kubectl get prometheusrule chaos-experiment-alerts -n $NAMESPACE"

# Test Prometheus integration
run_test "Prometheus monitoring namespace" \
    "kubectl get namespace $MONITORING_NAMESPACE"

# Test metrics endpoint
run_test "Chaos exporter service" \
    "kubectl get service chaos-exporter -n $NAMESPACE"

# Test if metrics are being scraped
run_detailed_test "Chaos metrics availability" \
    "kubectl get --raw /api/v1/namespaces/$NAMESPACE/services/chaos-exporter:8080/proxy/metrics | head -10"

echo ""
echo -e "${BLUE}8. Management Scripts Tests${NC}"
echo "================================================"

# Test management scripts
run_test "Chaos testing validation script" \
    "test -x /usr/local/bin/validate-chaos-testing"

run_test "Chaos experiment runner script" \
    "test -x /usr/local/bin/run-chaos-experiments"

run_test "etcd backup validation script" \
    "test -x /usr/local/bin/validate-etcd-backup"

echo ""
echo -e "${BLUE}9. Network and Multi-arch Tests${NC}"
echo "================================================"

# Test node architecture distribution
run_detailed_test "Node architecture distribution" \
    "kubectl get nodes -o custom-columns=NAME:.metadata.name,ARCH:.status.nodeInfo.architecture --no-headers"

# Test chaos operator architecture
run_detailed_test "Chaos operator node placement" \
    "kubectl get pods -n $NAMESPACE -l app.kubernetes.io/name=litmus -o custom-columns=NAME:.metadata.name,NODE:.spec.nodeName,ARCH:.spec.nodeSelector --no-headers"

# Test image pull status
run_test "LitmusChaos images pulled successfully" \
    "kubectl get pods -n $NAMESPACE --field-selector=status.phase=Running | wc -l | grep -v '^0$'"

echo ""
echo -e "${BLUE}10. Security and RBAC Tests${NC}"
echo "================================================"

# Test security contexts
run_detailed_test "Pod security contexts" \
    "kubectl get pods -n $NAMESPACE -o jsonpath='{.items[*].spec.securityContext}' | jq ."

# Test service account permissions
run_test "Litmus admin service account permissions" \
    "kubectl auth can-i '*' '*' --as=system:serviceaccount:$NAMESPACE:litmus-admin"

# Test network policies (if any)
run_test "Network policies" \
    "kubectl get networkpolicies -n $NAMESPACE || echo 'No network policies - may be OK'"

echo ""
echo -e "${BLUE}=== Chaos Testing Validation Summary ===${NC}"
echo "================================================"
echo -e "Total Tests: $TOTAL_TESTS"
echo -e "${GREEN}Passed: $PASSED_TESTS${NC}"
echo -e "${RED}Failed: $FAILED_TESTS${NC}"
echo ""

if [ $FAILED_TESTS -eq 0 ]; then
    echo -e "${GREEN}🎉 All chaos testing validation tests passed!${NC}"
    echo ""
    echo -e "${BLUE}Chaos Testing System Status:${NC}"
    echo "✅ LitmusChaos $LITMUS_VERSION deployed and operational"
    echo "✅ Chaos experiments configured and ready"
    echo "✅ Monitoring integration active"
    echo "✅ Management scripts deployed"
    echo "✅ RBAC and security configured"
    echo ""
    echo -e "${BLUE}Next Steps:${NC}"
    echo "1. Run individual experiments manually to test: /usr/local/bin/run-chaos-experiments"
    echo "2. Monitor experiment results in Grafana dashboards"
    echo "3. Configure AlertManager notifications for experiment failures"
    echo "4. Review and customize experiment parameters as needed"
    echo "5. Enable scheduled chaos testing when ready"
    echo ""
    echo -e "${BLUE}Experiment Categories Available:${NC}"
    echo "🏗️  Control Plane Tests: $CONTROL_PLANE_TESTS"
    echo "💾 Storage Tests: $STORAGE_TESTS" 
    echo "🔄 etcd Backup Tests: $ETCD_BACKUP_TESTS"
    echo "⏰ Scheduled Tests: $SCHEDULED_CHAOS"
    echo ""
    exit 0
else
    echo -e "${RED}❌ Some chaos testing validation tests failed!${NC}"
    echo ""
    echo -e "${YELLOW}Common Issues and Solutions:${NC}"
    echo "• LitmusChaos pods not ready: Check resource limits and node capacity"
    echo "• Experiments not found: They are created on-demand during execution"
    echo "• RBAC issues: Verify service account permissions"
    echo "• Network issues: Check ingress and service configurations"
    echo "• Multi-arch issues: Verify image compatibility with ARM64 nodes"
    echo ""
    echo -e "${BLUE}Debugging Commands:${NC}"
    echo "• kubectl get pods -n $NAMESPACE -o wide"
    echo "• kubectl describe deployment chaos-operator-ce -n $NAMESPACE"
    echo "• kubectl logs -n $NAMESPACE -l app.kubernetes.io/name=litmus"
    echo "• kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp'"
    echo ""
    exit 1
fi 