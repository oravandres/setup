---
# etcd Backup & Restore Role - Main Tasks for K3s
- name: Display etcd backup configuration
  debug:
    msg:
      - "=== etcd Backup & Restore Configuration ==="
      - "Backup Schedule: {{ backup_schedule | default('0 2 * * *') }}"
      - "Storage Type: {{ backup_storage_type | default('minio') }}"
      - "Encryption: {{ backup_encryption_enabled | default(true) }}"
      - "Retention - Daily: {{ daily_retention_days | default(7) }} days"
      - "Retention - Weekly: {{ weekly_retention_days | default(30) }} days"
  run_once: true

- name: Validate required variables
  assert:
    that:
      - backup_encryption_passphrase is defined
      - backup_encryption_passphrase | length > 0
      - rclone_config is defined
      - backup_bucket_name is defined
      - backup_bucket_name | length > 0
    fail_msg: "Required backup variables are missing. Please set backup_encryption_passphrase, rclone_config, and backup_bucket_name"

- name: Create etcd backup namespace
  kubernetes.core.k8s:
    name: etcd-backup
    api_version: v1
    kind: Namespace
    state: present

- name: Create backup encryption secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: backup-encryption-secret
        namespace: etcd-backup
      type: Opaque
      stringData:
        passphrase: "{{ backup_encryption_passphrase }}"
    state: present

- name: Create rclone configuration secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: rclone-config-secret
        namespace: etcd-backup
      type: Opaque
      stringData:
        rclone.conf: |
          {{ rclone_config | indent(10) }}
    state: present

- name: Create backup scripts ConfigMap
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: backup-scripts
        namespace: etcd-backup
      data:
        backup.sh: |
          #!/bin/bash
          set -euo pipefail

          echo "=== K3s etcd Backup Started at $(date) ==="

          # Configuration
          SNAPSHOT_DIR="/var/lib/rancher/k3s/server/db/snapshots"
          WORK_DIR="/tmp/backup-work"
          PASSPHRASE_FILE="/etc/backup-secrets/passphrase"
          RCLONE_CONFIG="/etc/rclone-config/rclone.conf"
          BUCKET_NAME="{{ backup_bucket_name }}"
          RETENTION_DAILY={{ daily_retention_days | default(7) }}
          RETENTION_WEEKLY={{ weekly_retention_days | default(30) }}

          # Create work directory
          mkdir -p "$WORK_DIR"
          cd "$WORK_DIR"

          # Generate snapshot name with timestamp
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SNAPSHOT_NAME="k3s-etcd-snapshot-${TIMESTAMP}"

          echo "Creating etcd snapshot: $SNAPSHOT_NAME"

          # Create etcd snapshot using K3s
          /usr/local/bin/k3s etcd-snapshot save --name "$SNAPSHOT_NAME"

          # Find the created snapshot
          SNAPSHOT_FILE=$(find "$SNAPSHOT_DIR" -name "${SNAPSHOT_NAME}*" -type f | head -1)

          if [ -z "$SNAPSHOT_FILE" ]; then
            echo "ERROR: Snapshot file not found!"
            exit 1
          fi

          echo "Found snapshot: $SNAPSHOT_FILE"

          # Copy snapshot to work directory
          cp "$SNAPSHOT_FILE" "$WORK_DIR/snapshot.db"

          # Encrypt snapshot
          echo "Encrypting snapshot..."
          gpg --batch --yes --passphrase-file "$PASSPHRASE_FILE" \
              --symmetric --cipher-algo AES256 \
              --output "snapshot-encrypted.db.gpg" \
              "snapshot.db"

          # Determine if this is a weekly backup (Sunday = day 0)
          DAY_OF_WEEK=$(date +%w)
          if [ "$DAY_OF_WEEK" -eq 0 ]; then
            BACKUP_TYPE="weekly"
          else
            BACKUP_TYPE="daily"
          fi

          # Upload to remote storage
          REMOTE_PATH="${BUCKET_NAME}/k3s-etcd-backups/${BACKUP_TYPE}/snapshot-${BACKUP_TYPE}-${TIMESTAMP}.db.gpg"
          echo "Uploading to: $REMOTE_PATH"

          rclone --config="$RCLONE_CONFIG" copy "snapshot-encrypted.db.gpg" "minio:/$REMOTE_PATH"

          if [ $? -eq 0 ]; then
            echo "✅ Backup uploaded successfully"
          else
            echo "❌ Backup upload failed"
            exit 1
          fi

          # Clean up local files
          rm -f snapshot.db snapshot-encrypted.db.gpg

          # Apply retention policies
          echo "Applying retention policies..."

          # Clean up daily backups older than retention period
          echo "Cleaning up daily backups older than $RETENTION_DAILY days..."
          rclone --config="$RCLONE_CONFIG" delete "minio:/${BUCKET_NAME}/k3s-etcd-backups/daily/" \
            --min-age "${RETENTION_DAILY}d" || true

          # Clean up weekly backups older than retention period but keep at least 4 recent
          echo "Cleaning up weekly backups older than $RETENTION_WEEKLY days..."
          WEEKLY_FILES=$(rclone --config="$RCLONE_CONFIG" lsjson "minio:/${BUCKET_NAME}/k3s-etcd-backups/weekly/" | \
            jq -r 'sort_by(.ModTime) | reverse | .[4:] | .[] | select((.ModTime | fromdateiso8601) < (now - ('"$RETENTION_WEEKLY"' * 86400))) | .Name')

          for file in $WEEKLY_FILES; do
            if [ -n "$file" ]; then
              echo "Deleting old weekly backup: $file"
              rclone --config="$RCLONE_CONFIG" delete "minio:/${BUCKET_NAME}/k3s-etcd-backups/weekly/$file" || true
            fi
          done

          echo "=== K3s etcd Backup Completed at $(date) ==="

        restore.sh: |
          #!/bin/bash
          set -euo pipefail

          echo "=== K3s etcd Restore Script ==="
          echo "Usage: $0 <backup-filename> [restore-path]"
          echo ""
          echo "This script downloads and prepares a backup for manual restore."
          echo "The actual restore must be performed manually on the control plane nodes."
          echo ""

          if [ $# -lt 1 ]; then
            echo "Error: Please specify backup filename"
            echo "Available backups:"
            rclone --config="/etc/rclone-config/rclone.conf" ls "minio:/{{ backup_bucket_name }}/k3s-etcd-backups/"
            exit 1
          fi

          BACKUP_FILE="$1"
          RESTORE_PATH="${2:-/tmp/restore}"
          PASSPHRASE_FILE="/etc/backup-secrets/passphrase"
          RCLONE_CONFIG="/etc/rclone-config/rclone.conf"
          BUCKET_NAME="{{ backup_bucket_name }}"

          mkdir -p "$RESTORE_PATH"
          cd "$RESTORE_PATH"

          echo "Downloading backup: $BACKUP_FILE"

          # Try to find the backup in daily or weekly directories
          if rclone --config="$RCLONE_CONFIG" copy "minio:/${BUCKET_NAME}/k3s-etcd-backups/daily/$BACKUP_FILE" . 2>/dev/null; then
            echo "Found in daily backups"
          elif rclone --config="$RCLONE_CONFIG" copy "minio:/${BUCKET_NAME}/k3s-etcd-backups/weekly/$BACKUP_FILE" . 2>/dev/null; then
            echo "Found in weekly backups"
          else
            echo "ERROR: Backup file not found in daily or weekly directories"
            exit 1
          fi

          echo "Decrypting backup..."
          gpg --batch --yes --passphrase-file "$PASSPHRASE_FILE" \
              --decrypt --output "restored-snapshot.db" "$BACKUP_FILE"

          echo ""
          echo "✅ Backup prepared for restore at: $RESTORE_PATH/restored-snapshot.db"
          echo ""
          echo "MANUAL RESTORE STEPS:"
          echo "1. Stop K3s on all server nodes: sudo systemctl stop k3s"
          echo "2. Copy restored-snapshot.db to first server node"
          echo "3. Run restore on first server: sudo k3s server --cluster-reset --cluster-reset-restore-path=$RESTORE_PATH/restored-snapshot.db"
          echo "4. Wait for first server to be healthy"
          echo "5. Start K3s on other servers: sudo systemctl start k3s"
          echo "6. Verify cluster health: kubectl get nodes"
          echo ""
          echo "⚠️  WARNING: This will restore the entire cluster state to the backup point!"
    state: present

- name: Create etcd backup CronJob
  kubernetes.core.k8s:
    definition:
      apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: etcd-backup
        namespace: etcd-backup
      spec:
        schedule: "{{ backup_schedule | default('0 2 * * *') }}"
        concurrencyPolicy: Forbid
        failedJobsHistoryLimit: 3
        successfulJobsHistoryLimit: 3
        jobTemplate:
          spec:
            template:
              spec:
                hostNetwork: true
                hostPID: true
                restartPolicy: OnFailure
                nodeSelector:
                  node-role.kubernetes.io/master: "true"
                tolerations:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
                    effect: NoSchedule
                containers:
                  - name: backup
                    image: "{{ backup_image | default('rclone/rclone:1.67.0') }}"
                    command: ["/bin/sh"]
                    args: ["-c", "/scripts/backup.sh"]
                    securityContext:
                      privileged: true
                    volumeMounts:
                      - name: k3s-data
                        mountPath: /var/lib/rancher/k3s
                      - name: k3s-bin
                        mountPath: /usr/local/bin/k3s
                        readOnly: true
                      - name: backup-scripts
                        mountPath: /scripts
                      - name: backup-secrets
                        mountPath: /etc/backup-secrets
                        readOnly: true
                      - name: rclone-config
                        mountPath: /etc/rclone-config
                        readOnly: true
                    env:
                      - name: TZ
                        value: "{{ backup_timezone | default('UTC') }}"
                volumes:
                  - name: k3s-data
                    hostPath:
                      path: /var/lib/rancher/k3s
                  - name: k3s-bin
                    hostPath:
                      path: /usr/local/bin/k3s
                  - name: backup-scripts
                    configMap:
                      name: backup-scripts
                      defaultMode: 0755
                  - name: backup-secrets
                    secret:
                      secretName: backup-encryption-secret
                      defaultMode: 0600
                  - name: rclone-config
                    secret:
                      secretName: rclone-config-secret
                      defaultMode: 0600
    state: present

- name: Create restore job template
  kubernetes.core.k8s:
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: etcd-restore-job
        namespace: etcd-backup
      spec:
        template:
          spec:
            hostNetwork: true
            hostPID: true
            restartPolicy: Never
            nodeSelector:
              node-role.kubernetes.io/master: "true"
            tolerations:
              - key: node-role.kubernetes.io/master
                operator: Exists
                effect: NoSchedule
            containers:
              - name: restore
                image: "{{ backup_image | default('rclone/rclone:1.67.0') }}"
                command: ["/bin/sh"]
                args: ["-c", "echo 'Restore job template created. Use kubectl to run with specific backup file.'"]
                securityContext:
                  privileged: true
                volumeMounts:
                  - name: backup-scripts
                    mountPath: /scripts
                  - name: backup-secrets
                    mountPath: /etc/backup-secrets
                    readOnly: true
                  - name: rclone-config
                    mountPath: /etc/rclone-config
                    readOnly: true
            volumes:
              - name: backup-scripts
                configMap:
                  name: backup-scripts
                  defaultMode: 0755
              - name: backup-secrets
                secret:
                  secretName: backup-encryption-secret
                  defaultMode: 0600
              - name: rclone-config
                secret:
                  secretName: rclone-config-secret
                  defaultMode: 0600
    state: present

- name: Deploy etcd backup validation script
  template:
    src: validate-etcd-backup.sh.j2
    dest: /usr/local/bin/validate-etcd-backup
    mode: '0755'
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true

- name: Run etcd backup validation
  command: /usr/local/bin/validate-etcd-backup
  register: etcd_backup_validation
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true

- name: Display etcd backup validation results
  debug:
    var: etcd_backup_validation.stdout_lines
  run_once: true

- name: Display etcd backup deployment summary
  debug:
    msg:
      - "=== etcd Backup & Restore Deployment Complete ==="
      - "✅ Automated etcd backup CronJob configured"
      - "✅ Backup encryption enabled"
      - "✅ Remote storage integration configured"
      - "✅ Retention policies implemented"
      - "✅ Restore procedures documented"
      - ""
      - "Backup Schedule: {{ backup_schedule | default('0 2 * * *') }} ({{ backup_timezone | default('UTC') }})"
      - "Storage: {{ backup_storage_type | default('minio') }}://{{ backup_bucket_name }}"
      - "Retention: Daily {{ daily_retention_days | default(7) }}d, Weekly {{ weekly_retention_days | default(30) }}d"
      - ""
      - "Manual Commands:"
      - "- Check backups: kubectl logs -n etcd-backup -l job-name=etcd-backup"
      - "- List backups: rclone ls minio:/{{ backup_bucket_name }}/k3s-etcd-backups/"
      - "- Trigger backup: kubectl create job -n etcd-backup manual-backup --from=cronjob/etcd-backup"
      - "- Restore backup: kubectl apply -f restore-job.yaml (with backup filename)"
  run_once: true
