#!/bin/bash
# etcd Backup & Restore System Validation Script
# Tests automated backup, encryption, storage, retention, and restore capabilities
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

echo "=== etcd Backup & Restore System Validation ==="
echo "Backup Schedule: {{ backup_schedule | default('0 2 * * *') }}"
echo "Storage Type: {{ backup_storage_type | default('minio') }}"
echo "Bucket: {{ backup_bucket_name | default('k3s-backups') }}"
echo "Encryption: {{ backup_encryption_enabled | default(true) }}"
echo "Timestamp: $(date)"
echo "Node: $(hostname)"
echo

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test results
TESTS_PASSED=0
TESTS_FAILED=0

# Function to run test
run_test() {
    local test_name="$1"
    local test_command="$2"
    echo -n "Testing $test_name... "
    
    if eval "$test_command" &>/dev/null; then
        echo -e "${GREEN}PASS${NC}"
        ((TESTS_PASSED++))
        return 0
    else
        echo -e "${RED}FAIL${NC}"
        ((TESTS_FAILED++))
        return 1
    fi
}

# Function to run info test (always passes, just shows info)
run_info() {
    local test_name="$1"
    local test_command="$2"
    echo -n "Checking $test_name... "
    
    local result
    result=$(eval "$test_command" 2>/dev/null || echo "Not available")
    echo -e "${BLUE}$result${NC}"
}

# Function to show detailed info
show_info() {
    echo -e "\n${YELLOW}=== etcd Backup System Information ===${NC}"
    
    echo -e "\n${YELLOW}Backup Namespace:${NC}"
    kubectl get namespace etcd-backup 2>/dev/null || echo "etcd-backup namespace not found"
    
    echo -e "\n${YELLOW}Backup Resources:${NC}"
    kubectl get all -n etcd-backup 2>/dev/null || echo "No backup resources found"
    
    echo -e "\n${YELLOW}Backup Secrets:${NC}"
    kubectl get secrets -n etcd-backup 2>/dev/null || echo "No backup secrets found"
    
    echo -e "\n${YELLOW}Backup ConfigMaps:${NC}"
    kubectl get configmaps -n etcd-backup 2>/dev/null || echo "No backup configmaps found"
    
    echo -e "\n${YELLOW}CronJob Status:${NC}"
    kubectl get cronjob etcd-backup -n etcd-backup -o wide 2>/dev/null || echo "CronJob not found"
    
    echo -e "\n${YELLOW}Recent Backup Jobs:${NC}"
    kubectl get jobs -n etcd-backup --sort-by='.metadata.creationTimestamp' | tail -5 2>/dev/null || echo "No backup jobs found"
    
    echo -e "\n${YELLOW}Recent Backup Events:${NC}"
    kubectl get events -n etcd-backup --sort-by='.lastTimestamp' | tail -10 2>/dev/null || echo "No events found"
    
    echo -e "\n${YELLOW}etcd Snapshot Directory:${NC}"
    ls -la /var/lib/rancher/k3s/server/db/snapshots/ 2>/dev/null | tail -10 || echo "Snapshot directory not accessible"
}

echo "=== Running etcd Backup & Restore Tests ==="

# Section 1: Core Infrastructure Tests
echo -e "\n${YELLOW}=== Core Infrastructure Tests ===${NC}"

run_test "etcd backup namespace exists" \
    "kubectl get namespace etcd-backup"

run_test "Backup encryption secret exists" \
    "kubectl get secret backup-encryption-secret -n etcd-backup"

run_test "rclone configuration secret exists" \
    "kubectl get secret rclone-config-secret -n etcd-backup"

run_test "Backup scripts ConfigMap exists" \
    "kubectl get configmap backup-scripts -n etcd-backup"

run_test "etcd backup CronJob exists" \
    "kubectl get cronjob etcd-backup -n etcd-backup"

run_test "etcd restore job template exists" \
    "kubectl get job etcd-restore-job -n etcd-backup"

# Section 2: CronJob Configuration Tests
echo -e "\n${YELLOW}=== CronJob Configuration Tests ===${NC}"

run_test "CronJob has correct schedule" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.spec.schedule}' | grep -q '{{ backup_schedule | default('0 2 * * *') }}'"

run_test "CronJob runs on master nodes only" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.spec.jobTemplate.spec.template.spec.nodeSelector}' | grep -q 'node-role.kubernetes.io/master'"

run_test "CronJob has privileged security context" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.spec.jobTemplate.spec.template.spec.containers[0].securityContext.privileged}' | grep -q 'true'"

run_test "CronJob has host network access" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.spec.jobTemplate.spec.template.spec.hostNetwork}' | grep -q 'true'"

run_test "CronJob mounts K3s data directory" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.spec.jobTemplate.spec.template.spec.volumes[*].hostPath.path}' | grep -q '/var/lib/rancher/k3s'"

run_test "CronJob mounts K3s binary" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.spec.jobTemplate.spec.template.spec.volumes[*].hostPath.path}' | grep -q '/usr/local/bin/k3s'"

# Section 3: Backup Script Tests
echo -e "\n${YELLOW}=== Backup Script Tests ===${NC}"

run_test "Backup script contains K3s snapshot command" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.backup\.sh}' | grep -q 'k3s etcd-snapshot save'"

run_test "Backup script includes encryption" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.backup\.sh}' | grep -q 'gpg.*--symmetric'"

run_test "Backup script includes rclone upload" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.backup\.sh}' | grep -q 'rclone.*copy'"

run_test "Backup script includes retention policy" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.backup\.sh}' | grep -q 'min-age.*d'"

run_test "Backup script differentiates daily/weekly" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.backup\.sh}' | grep -q 'BACKUP_TYPE'"

# Section 4: Restore Script Tests
echo -e "\n${YELLOW}=== Restore Script Tests ===${NC}"

run_test "Restore script exists in ConfigMap" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.restore\.sh}' | grep -q 'etcd Restore Script'"

run_test "Restore script includes backup download" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.restore\.sh}' | grep -q 'rclone.*copy'"

run_test "Restore script includes decryption" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.restore\.sh}' | grep -q 'gpg.*--decrypt'"

run_test "Restore script provides manual instructions" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.restore\.sh}' | grep -q 'MANUAL RESTORE STEPS'"

run_test "Restore script includes cluster reset command" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.restore\.sh}' | grep -q 'cluster-reset'"

# Section 5: Security Tests
echo -e "\n${YELLOW}=== Security Tests ===${NC}"

run_test "Encryption secret has passphrase data" \
    "kubectl get secret backup-encryption-secret -n etcd-backup -o jsonpath='{.data.passphrase}' | base64 -d | wc -c | grep -q '[1-9]'"

run_test "rclone config secret has configuration data" \
    "kubectl get secret rclone-config-secret -n etcd-backup -o jsonpath='{.data.rclone\.conf}' | base64 -d | wc -c | grep -q '[1-9]'"

run_test "Secrets have restrictive permissions" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.spec.jobTemplate.spec.template.spec.volumes[*].secret.defaultMode}' | grep -q '384'"

run_test "ConfigMap scripts have execute permissions" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.spec.jobTemplate.spec.template.spec.volumes[*].configMap.defaultMode}' | grep -q '493'"

# Section 6: K3s Integration Tests
echo -e "\n${YELLOW}=== K3s Integration Tests ===${NC}"

run_test "K3s binary is accessible" \
    "test -x /usr/local/bin/k3s"

run_test "K3s snapshot directory exists" \
    "test -d /var/lib/rancher/k3s/server/db/snapshots"

run_test "K3s etcd-snapshot command works" \
    "/usr/local/bin/k3s etcd-snapshot --help | grep -q 'save'"

run_test "etcd is running" \
    "pgrep -f 'etcd' | wc -l | grep -q '[1-9]'"

# Test manual snapshot creation (if we can write to snapshot dir)
if [ -w /var/lib/rancher/k3s/server/db/snapshots ]; then
    run_test "Can create manual etcd snapshot" \
        "/usr/local/bin/k3s etcd-snapshot save --name validation-test-$(date +%s)"
    
    # Clean up test snapshot
    find /var/lib/rancher/k3s/server/db/snapshots -name "validation-test-*" -delete 2>/dev/null || true
fi

# Section 7: Job Execution Tests
echo -e "\n${YELLOW}=== Job Execution Tests ===${NC}"

# Check if there are any completed backup jobs
if kubectl get jobs -n etcd-backup --no-headers 2>/dev/null | grep -q "backup"; then
    run_test "Previous backup jobs completed successfully" \
        "kubectl get jobs -n etcd-backup -o jsonpath='{.items[?(@.status.succeeded>=1)].metadata.name}' | wc -w | grep -q '[1-9]'"
    
    # Get logs from the most recent successful job
    LATEST_JOB=$(kubectl get jobs -n etcd-backup --sort-by='.metadata.creationTimestamp' -o jsonpath='{.items[-1:].metadata.name}' 2>/dev/null || echo "")
    if [ -n "$LATEST_JOB" ]; then
        run_test "Latest backup job logs show success" \
            "kubectl logs job/$LATEST_JOB -n etcd-backup | grep -q 'Backup uploaded successfully'"
    fi
fi

# Section 8: Storage Integration Tests
echo -e "\n${YELLOW}=== Storage Integration Tests ===${NC}"

# Test if we can validate rclone configuration
run_test "rclone configuration is valid" \
    "kubectl get secret rclone-config-secret -n etcd-backup -o jsonpath='{.data.rclone\.conf}' | base64 -d | grep -q '\\[minio\\]'"

run_test "Backup bucket name is configured" \
    "kubectl get configmap backup-scripts -n etcd-backup -o jsonpath='{.data.backup\.sh}' | grep -q '{{ backup_bucket_name | default('k3s-backups') }}'"

# Section 9: System Information
echo -e "\n${YELLOW}=== System Information ===${NC}"

run_info "Backup schedule" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.spec.schedule}'"

run_info "Next backup time" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.status.lastScheduleTime}'"

run_info "Total backup jobs created" \
    "kubectl get jobs -n etcd-backup --no-headers | wc -l"

run_info "Successful backup jobs" \
    "kubectl get jobs -n etcd-backup -o jsonpath='{.items[?(@.status.succeeded>=1)].metadata.name}' | wc -w"

run_info "Failed backup jobs" \
    "kubectl get jobs -n etcd-backup -o jsonpath='{.items[?(@.status.failed>=1)].metadata.name}' | wc -w"

run_info "etcd snapshot directory size" \
    "du -sh /var/lib/rancher/k3s/server/db/snapshots/ 2>/dev/null | cut -f1 || echo 'Not accessible'"

run_info "Number of local snapshots" \
    "ls -1 /var/lib/rancher/k3s/server/db/snapshots/ 2>/dev/null | wc -l || echo 'Not accessible'"

run_info "Backup image version" \
    "kubectl get cronjob etcd-backup -n etcd-backup -o jsonpath='{.spec.jobTemplate.spec.template.spec.containers[0].image}'"

run_info "Storage type" \
    "echo '{{ backup_storage_type | default('minio') }}'"

run_info "Retention policy" \
    "echo 'Daily: {{ daily_retention_days | default(7) }}d, Weekly: {{ weekly_retention_days | default(30) }}d'"

echo
echo "=== Test Summary ==="
echo -e "Tests passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Tests failed: ${RED}$TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "\n${GREEN}✅ All etcd backup & restore tests passed!${NC}"
    echo -e "${GREEN}🔒 etcd backup system is ready for production use${NC}"
    show_info
    
    echo -e "\n${YELLOW}Backup & Restore Next Steps:${NC}"
    echo "1. Monitor backup execution: kubectl get jobs -n etcd-backup -w"
    echo "2. Check backup logs: kubectl logs -n etcd-backup -l job-name=etcd-backup"
    echo "3. List remote backups: rclone ls minio:/{{ backup_bucket_name | default('k3s-backups') }}/k3s-etcd-backups/"
    echo "4. Test manual backup: kubectl create job -n etcd-backup manual-backup --from=cronjob/etcd-backup"
    echo "5. Practice restore procedure with test snapshots"
    echo "6. Set up monitoring alerts for backup failures"
    echo "7. Document backup verification and restore procedures for your team"
    
    exit 0
else
    echo -e "\n${RED}❌ Some etcd backup & restore tests failed!${NC}"
    echo -e "${RED}🚨 Review the issues above before relying on backups${NC}"
    show_info
    exit 1
fi 