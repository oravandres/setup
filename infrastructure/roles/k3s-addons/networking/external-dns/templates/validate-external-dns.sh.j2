#!/bin/bash
# external-dns v0.14 Validation Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

echo "=== external-dns v0.14 Validation Script ==="
echo "Timestamp: $(date)"
echo "Node: $(hostname)"
echo

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test results
TESTS_PASSED=0
TESTS_FAILED=0

# Function to run test
run_test() {
    local test_name="$1"
    local test_command="$2"
    echo -n "Testing $test_name... "
    
    if eval "$test_command" &>/dev/null; then
        echo -e "${GREEN}PASS${NC}"
        ((TESTS_PASSED++))
        return 0
    else
        echo -e "${RED}FAIL${NC}"
        ((TESTS_FAILED++))
        return 1
    fi
}

# Function to show detailed info
show_info() {
    echo -e "\n${YELLOW}=== external-dns Deployment Information ===${NC}"
    
    echo -e "\n${YELLOW}Namespace:${NC}"
    kubectl get namespace external-dns 2>/dev/null || echo "external-dns namespace not found"
    
    echo -e "\n${YELLOW}Pods:${NC}"
    kubectl get pods -n external-dns -o wide 2>/dev/null || echo "No external-dns pods found"
    
    echo -e "\n${YELLOW}Services:${NC}"
    kubectl get services -n external-dns 2>/dev/null || echo "No external-dns services found"
    
    echo -e "\n${YELLOW}Deployment:${NC}"
    kubectl get deployment external-dns -n external-dns -o wide 2>/dev/null || echo "No external-dns deployment found"
    
    echo -e "\n${YELLOW}ConfigMap:${NC}"
    kubectl get configmap -n external-dns 2>/dev/null || echo "No external-dns configmaps found"
    
    echo -e "\n${YELLOW}Secrets:${NC}"
    kubectl get secrets -n external-dns 2>/dev/null || echo "No external-dns secrets found"
    
    echo -e "\n${YELLOW}Recent External-DNS Events:${NC}"
    kubectl get events -n external-dns --sort-by='.lastTimestamp' | tail -10 2>/dev/null || echo "No events found"
}

echo "=== Running external-dns Tests ==="

# Test 1: Check if external-dns namespace exists
run_test "external-dns namespace exists" \
    "kubectl get namespace external-dns"

# Test 2: Check if external-dns pods are running
run_test "external-dns pods are running" \
    "kubectl get pods -n external-dns -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

# Test 3: Check if external-dns deployment is ready
run_test "external-dns deployment is ready" \
    "kubectl get deployment external-dns -n external-dns -o jsonpath='{.status.readyReplicas}' | grep -q '[1-9]'"

# Test 4: Check if Cloudflare API token secret exists
run_test "Cloudflare API token secret exists" \
    "kubectl get secret cloudflare-api-token -n external-dns"

# Test 5: Check if API token secret has content
if kubectl get secret cloudflare-api-token -n external-dns &>/dev/null; then
    run_test "Cloudflare API token secret has content" \
        "kubectl get secret cloudflare-api-token -n external-dns -o jsonpath='{.data.api-token}' | base64 -d | wc -c | grep -q '[1-9]'"
fi

# Test 6: Check if external-dns service exists
run_test "external-dns service exists" \
    "kubectl get service external-dns -n external-dns"

# Test 7: Check if external-dns is processing records (check logs for activity)
run_test "external-dns is processing DNS records" \
    "kubectl logs -n external-dns deployment/external-dns --tail=50 | grep -i 'processing'"

# Test 8: Check if external-dns logs show no critical errors
run_test "external-dns logs show no critical errors" \
    "! kubectl logs -n external-dns deployment/external-dns --tail=100 | grep -i 'error.*cloudflare'"

# Test 9: Check if external-dns is connected to Cloudflare
run_test "external-dns connected to Cloudflare" \
    "kubectl logs -n external-dns deployment/external-dns --tail=100 | grep -i 'cloudflare'"

# Test 10: Check if ServiceMonitor exists (if Prometheus is configured)
if kubectl get crd servicemonitors.monitoring.coreos.com &>/dev/null; then
    if kubectl get servicemonitor external-dns -n external-dns &>/dev/null; then
        run_test "external-dns ServiceMonitor exists" \
            "kubectl get servicemonitor external-dns -n external-dns"
    fi
fi

# Test 11: Check metrics endpoint (if accessible)
if kubectl get service external-dns -n external-dns -o jsonpath='{.spec.ports[?(@.name=="http")].port}' &>/dev/null; then
    METRICS_PORT=$(kubectl get service external-dns -n external-dns -o jsonpath='{.spec.ports[?(@.name=="http")].port}')
    if [ ! -z "$METRICS_PORT" ]; then
        run_test "external-dns metrics endpoint responds" \
            "kubectl exec -n external-dns deployment/external-dns -- wget -q -O- http://localhost:${METRICS_PORT}/metrics | grep -q 'external_dns'"
    fi
fi

# Test 12: Check if external-dns is managing any DNS records (check for TXT records)
run_test "external-dns managing DNS records" \
    "kubectl logs -n external-dns deployment/external-dns --tail=200 | grep -i 'desired.*current'"

echo
echo "=== Test Summary ==="
echo -e "Tests passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Tests failed: ${RED}$TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "\n${GREEN}✅ All external-dns tests passed!${NC}"
    show_info
    exit 0
else
    echo -e "\n${RED}❌ Some external-dns tests failed!${NC}"
    show_info
    exit 1
fi 