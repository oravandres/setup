---
# Logging Stack Default Configuration (Loki + Promtail)

# Chart versions
loki_chart_version: "6.6.4"
promtail_chart_version: "6.16.4"

# Component versions
loki_version: "3.1.0"
promtail_version: "3.1.0"

# Storage configuration
loki_storage_enabled: true
loki_storage_size: "50Gi"
loki_storage_class: "longhorn"
loki_retention_period: "168h"  # 7 days

# Ingress configuration
create_loki_ingress: false
loki_domain: "loki.local"
loki_cert_issuer: "letsencrypt-staging"

# Monitoring configuration
enable_loki_monitoring: true
enable_promtail_monitoring: true

# Grafana integration
grafana_domain: "grafana.local"

# Loki Helm values
loki_values:
  # Deployment mode - SingleBinary for simplicity
  deploymentMode: SingleBinary
  
  # Loki configuration
  loki:
    # Storage configuration
    storage:
      type: filesystem
      filesystem:
        chunks_directory: /var/loki/chunks
        rules_directory: /var/loki/rules
    
    # Schema configuration
    schemaConfig:
      configs:
        - from: 2020-10-24
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    
    # Storage configuration
    storageConfig:
      filesystem:
        directory: /var/loki/chunks
    
    # Server configuration
    server:
      http_listen_port: 3100
      grpc_listen_port: 9095
      log_level: info
    
    # Limits configuration (optimized for mixed architecture)
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h  # 7 days
      ingestion_rate_mb: 8  # Per stream limit
      ingestion_burst_size_mb: 16
      per_stream_rate_limit: 5MB
      per_stream_rate_limit_burst: 10MB
      max_query_parallelism: 16
      max_query_series: 1000
      max_query_lookback: 168h
      retention_period: 168h  # 7 days
    
    # Compactor for retention
    compactor:
      working_directory: /var/loki/boltdb-shipper-compactor
      shared_store: filesystem
      compaction_interval: 10m
      retention_enabled: true
      retention_delete_delay: 2h
      retention_delete_worker_count: 150
    
    # Query scheduler
    query_scheduler:
      max_outstanding_requests_per_tenant: 2048
    
    # Frontend
    frontend:
      max_outstanding_per_tenant: 2048
      compress_responses: true
      log_queries_longer_than: 10s
    
    # Querier
    querier:
      max_concurrent: 16
  
  # Single binary deployment
  singleBinary:
    # Resource configuration - balanced for mixed hardware
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
    
    # Persistence
    persistence:
      enabled: true
      size: "{{ loki_storage_size }}"
      storageClass: "{{ loki_storage_class }}"
    
    # Node affinity - prefer x86_64 but allow ARM
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 80
            preference:
              matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values: ["amd64"]
    
    # Tolerations for mixed architecture
    tolerations:
      - key: "arm"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: "node.kubernetes.io/arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"
    
    # Extra environment variables
    extraEnv:
      - name: JAEGER_AGENT_HOST
        value: ""
      - name: JAEGER_ENDPOINT
        value: ""
      - name: JAEGER_SAMPLER_TYPE
        value: ""
      - name: JAEGER_SAMPLER_PARAM
        value: ""
  
  # Gateway configuration (for ingress)
  gateway:
    enabled: true
    replicas: 1
    
    # Resources for gateway
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    
    # Service configuration
    service:
      type: ClusterIP
      port: 80
    
    # Ingress configuration
    ingress:
      enabled: false  # We handle ingress separately
  
  # Disable read/write/backend components (using single binary)
  read:
    enabled: false
  write:
    enabled: false
  backend:
    enabled: false
  
  # Monitoring configuration
  monitoring:
    enabled: true
    
    serviceMonitor:
      enabled: true
      namespace: monitoring
      labels:
        release: kube-prometheus-stack
    
    selfMonitoring:
      enabled: false
      grafanaAgent:
        installOperator: false
  
  # Test configuration
  test:
    enabled: false

# Promtail Helm values
promtail_values:
  # Image configuration
  image:
    tag: "{{ promtail_version }}"
  
  # Configuration
  config:
    # Promtail server configuration
    server:
      http_listen_port: 3101
      grpc_listen_port: 9095
      log_level: info
    
    # Position file
    positions:
      filename: /run/promtail/positions.yaml
    
    # Loki client configuration
    clients:
      - url: http://loki-gateway.logging.svc.cluster.local/loki/api/v1/push
        tenant_id: ""
        batchwait: 1s
        batchsize: 1048576
        timeout: 10s
        backoff_config:
          min_period: 500ms
          max_period: 5m
          max_retries: 10
    
    # Scrape configurations
    scrape_configs:
      # Kubernetes pod logs
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_controller_name]
            regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
            target_label: __tmp_controller_name
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name, __meta_kubernetes_pod_label_app, __tmp_controller_name, __meta_kubernetes_pod_name]
            regex: ^;*([^;]+)(;.*)?$
            target_label: app
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component, __meta_kubernetes_pod_label_component]
            regex: ^;*([^;]+)(;.*)?$
            target_label: component
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: drop
            regex: false
          - source_labels: [__meta_kubernetes_pod_phase]
            action: drop
            regex: Pending|Succeeded|Failed|Completed
          - source_labels: [__meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
            target_label: __path__
            separator: /
            replacement: /var/log/pods/*$1/*.log
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_container_name]
            target_label: container
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node
        
        pipeline_stages:
          # Parse container logs
          - cri: {}
          
          # Extract log level
          - regex:
              expression: '(?P<level>DEBUG|INFO|WARN|WARNING|ERROR|FATAL|TRACE)'
          - labels:
              level:
          
          # Drop empty lines
          - match:
              selector: '{job="kubernetes-pods"}'
              stages:
                - drop:
                    expression: '^\s*$'
          
          # Limit log line length
          - limit:
              rate: 1000
              burst: 2000
              drop: true
      
      # Kubernetes events
      - job_name: kubernetes-events
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: [kube-system]
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_component]
            action: keep
            regex: kube-apiserver
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: https
        static_configs:
          - targets: ['localhost']
            labels:
              job: kubernetes-events
              __path__: /var/log/pods/kube-system_*/kube-apiserver/*.log
  
  # Resources - lightweight for Pi compatibility
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Security context
  securityContext:
    runAsUser: 0
    runAsGroup: 0
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
  
  # Volume mounts for log access
  volumeMounts:
    - name: pods
      mountPath: /var/log/pods
      readOnly: true
    - name: containers
      mountPath: /var/lib/docker/containers
      readOnly: true
  
  # Additional volumes
  extraVolumes:
    - name: pods
      hostPath:
        path: /var/log/pods
    - name: containers
      hostPath:
        path: /var/lib/docker/containers
  
  # Tolerations to run on all nodes
  tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: NoSchedule
    - key: node-role.kubernetes.io/control-plane
      operator: Exists
      effect: NoSchedule
    - key: "arm"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
    - key: "node.kubernetes.io/arch"
      operator: "Equal"
      value: "arm64"
      effect: "NoSchedule"
  
  # Service monitor for Prometheus
  serviceMonitor:
    enabled: true
    namespace: monitoring
    labels:
      release: kube-prometheus-stack
    interval: 30s
    scrapeTimeout: 10s
  
  # Extra environment variables
  extraEnv:
    - name: HOSTNAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName 