#!/bin/bash

# Logging Stack Validation Script (Loki + Promtail)
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
NAMESPACE="logging"
MONITORING_NAMESPACE="monitoring"
LOKI_DOMAIN="{{ loki_domain | default('loki.local') }}"
GRAFANA_DOMAIN="{{ grafana_domain | default('grafana.local') }}"
CREATE_INGRESS="{{ create_loki_ingress | default(false) }}"

echo -e "${BLUE}=== Logging Stack Validation ===${NC}"
echo "Validating Loki and Promtail deployment..."
echo ""

# Test counters
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Test function
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="${3:-0}"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "Testing $test_name... "
    
    if eval "$test_command" >/dev/null 2>&1; then
        if [ "$expected_result" = "0" ]; then
            echo -e "${GREEN}✓ PASS${NC}"
            PASSED_TESTS=$((PASSED_TESTS + 1))
        else
            echo -e "${RED}✗ FAIL${NC} (expected failure but command succeeded)"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        fi
    else
        if [ "$expected_result" = "1" ]; then
            echo -e "${GREEN}✓ PASS${NC} (expected failure)"
            PASSED_TESTS=$((PASSED_TESTS + 1))
        else
            echo -e "${RED}✗ FAIL${NC}"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        fi
    fi
}

# Test with details function
run_test_with_details() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="${3:-0}"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "Testing $test_name... "
    
    if result=$(eval "$test_command" 2>&1); then
        if [ "$expected_result" = "0" ]; then
            echo -e "${GREEN}✓ PASS${NC}"
            PASSED_TESTS=$((PASSED_TESTS + 1))
            return 0
        else
            echo -e "${RED}✗ FAIL${NC} (expected failure but command succeeded)"
            FAILED_TESTS=$((FAILED_TESTS + 1))
            return 1
        fi
    else
        if [ "$expected_result" = "1" ]; then
            echo -e "${GREEN}✓ PASS${NC} (expected failure)"
            PASSED_TESTS=$((PASSED_TESTS + 1))
            return 0
        else
            echo -e "${RED}✗ FAIL${NC}"
            echo -e "${YELLOW}Details: $result${NC}"
            FAILED_TESTS=$((FAILED_TESTS + 1))
            return 1
        fi
    fi
}

echo "=== 1. Namespace and Basic Resources ==="

# Check if logging namespace exists
run_test "logging namespace exists" \
    "kubectl get namespace $NAMESPACE"

# Check if Helm releases exist
run_test "Loki Helm release exists" \
    "helm list -n $NAMESPACE | grep -q loki"

run_test "Promtail Helm release exists" \
    "helm list -n $NAMESPACE | grep -q promtail"

echo ""
echo "=== 2. Pod Status and Health ==="

# Check Loki pods
run_test "Loki pods are running" \
    "kubectl get pods -n $NAMESPACE -l app.kubernetes.io/name=loki --field-selector=status.phase=Running | grep -q loki"

# Check Promtail pods
run_test "Promtail pods are running" \
    "kubectl get pods -n $NAMESPACE -l app.kubernetes.io/name=promtail --field-selector=status.phase=Running | grep -q promtail"

# Check Loki readiness
run_test "Loki pods are ready" \
    "kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=loki -n $NAMESPACE --timeout=60s"

# Check Promtail readiness  
run_test "Promtail pods are ready" \
    "kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=promtail -n $NAMESPACE --timeout=60s"

echo ""
echo "=== 3. Service Connectivity ==="

# Check Loki service
run_test "Loki service exists" \
    "kubectl get service -n $NAMESPACE | grep -q loki"

# Check Loki gateway service
run_test "Loki gateway service exists" \
    "kubectl get service -n $NAMESPACE loki-gateway"

# Check Promtail service
run_test "Promtail service exists" \
    "kubectl get service -n $NAMESPACE | grep -q promtail"

# Test Loki API connectivity
run_test "Loki API is accessible" \
    "kubectl exec -n $NAMESPACE deployment/loki -- wget -q --spider http://localhost:3100/ready"

# Test Promtail metrics endpoint
run_test "Promtail metrics endpoint is accessible" \
    "kubectl exec -n $NAMESPACE daemonset/promtail -- wget -q --spider http://localhost:3101/metrics"

echo ""
echo "=== 4. Storage and Persistence ==="

# Check PVCs
run_test "Loki PVC exists" \
    "kubectl get pvc -n $NAMESPACE | grep -q loki"

# Check PVC is bound
run_test "Loki PVC is bound" \
    "kubectl get pvc -n $NAMESPACE -o jsonpath='{.items[?(@.metadata.name==\"storage-loki-0\")].status.phase}' | grep -q Bound"

# Check storage class
run_test "Loki PVC uses correct storage class" \
    "kubectl get pvc -n $NAMESPACE storage-loki-0 -o jsonpath='{.spec.storageClassName}' | grep -q '{{ loki_storage_class }}'"

echo ""
echo "=== 5. Configuration Validation ==="

# Check Loki configuration
run_test "Loki config is valid" \
    "kubectl exec -n $NAMESPACE deployment/loki -- /usr/bin/loki -config.file=/etc/loki/config/config.yaml -verify-config"

# Check retention configuration
run_test "Loki retention is configured" \
    "kubectl get configmap -n $NAMESPACE loki -o yaml | grep -q 'retention_enabled: true'"

# Check Promtail configuration
run_test "Promtail config exists" \
    "kubectl get configmap -n $NAMESPACE promtail -o yaml | grep -q 'promtail.yaml'"

echo ""
echo "=== 6. Log Ingestion Testing ==="

# Create test pod for log generation
cat <<EOF | kubectl apply -f - >/dev/null 2>&1
apiVersion: v1
kind: Pod
metadata:
  name: log-test-pod
  namespace: $NAMESPACE
  labels:
    app: log-test
spec:
  restartPolicy: Never
  containers:
  - name: log-generator
    image: busybox:1.35
    command: ['sh', '-c']
    args:
    - |
      echo "INFO: Test log message $(date)" &&
      echo "ERROR: Test error message $(date)" &&
      echo "DEBUG: Test debug message $(date)" &&
      sleep 30
EOF

# Wait for test pod
run_test "Test pod created successfully" \
    "kubectl wait --for=condition=Ready pod/log-test-pod -n $NAMESPACE --timeout=60s"

# Wait for logs to be processed
sleep 10

# Test log query (basic)
run_test "Loki can query logs" \
    "kubectl exec -n $NAMESPACE deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/query?query={namespace=\"$NAMESPACE\"}' | grep -q 'streams'"

# Test specific log query
run_test "Loki contains test pod logs" \
    "kubectl exec -n $NAMESPACE deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/query?query={pod=\"log-test-pod\"}' | grep -q 'Test log message'"

# Clean up test pod
kubectl delete pod log-test-pod -n $NAMESPACE >/dev/null 2>&1 || true

echo ""
echo "=== 7. Monitoring Integration ==="

# Check ServiceMonitors
{% if enable_loki_monitoring | default(true) %}
run_test "Loki ServiceMonitor exists" \
    "kubectl get servicemonitor -n $NAMESPACE loki-metrics"

run_test "Loki ServiceMonitor has correct labels" \
    "kubectl get servicemonitor -n $NAMESPACE loki-metrics -o jsonpath='{.metadata.labels.release}' | grep -q 'kube-prometheus-stack'"
{% endif %}

{% if enable_promtail_monitoring | default(true) %}
run_test "Promtail ServiceMonitor exists" \
    "kubectl get servicemonitor -n $NAMESPACE promtail-metrics"

run_test "Promtail ServiceMonitor has correct labels" \
    "kubectl get servicemonitor -n $NAMESPACE promtail-metrics -o jsonpath='{.metadata.labels.release}' | grep -q 'kube-prometheus-stack'"
{% endif %}

# Check PrometheusRules
run_test "Loki PrometheusRules exist" \
    "kubectl get prometheusrule -n $NAMESPACE loki-alerts"

# Test metrics endpoints
run_test "Loki metrics endpoint responds" \
    "kubectl exec -n $NAMESPACE deployment/loki -- wget -q --spider http://localhost:3100/metrics"

run_test "Promtail metrics endpoint responds" \
    "kubectl exec -n $NAMESPACE daemonset/promtail -- wget -q --spider http://localhost:3101/metrics"

echo ""
echo "=== 8. Network and Ingress ==="

{% if create_loki_ingress | default(false) %}
# Check ingress
run_test "Loki ingress exists" \
    "kubectl get ingress -n $NAMESPACE loki-ingress"

run_test "Loki ingress has correct host" \
    "kubectl get ingress -n $NAMESPACE loki-ingress -o jsonpath='{.spec.rules[0].host}' | grep -q '$LOKI_DOMAIN'"

# Check TLS configuration
run_test "Loki ingress has TLS configured" \
    "kubectl get ingress -n $NAMESPACE loki-ingress -o jsonpath='{.spec.tls[0].secretName}' | grep -q 'loki-tls'"
{% endif %}

# Test internal DNS resolution
run_test "Loki gateway DNS resolves internally" \
    "kubectl run dns-test --image=busybox:1.35 --rm -it --restart=Never -- nslookup loki-gateway.$NAMESPACE.svc.cluster.local"

echo ""
echo "=== 9. Performance and Resource Usage ==="

# Check resource usage
if kubectl top pods -n $NAMESPACE >/dev/null 2>&1; then
    run_test "Loki resource usage is reasonable" \
        "kubectl top pods -n $NAMESPACE -l app.kubernetes.io/name=loki --no-headers | awk '{if(\$3 ~ /[0-9]+Mi/ && \$3+0 < 4000) print \"OK\"; else print \"HIGH\"}' | grep -q OK"
    
    run_test "Promtail resource usage is reasonable" \
        "kubectl top pods -n $NAMESPACE -l app.kubernetes.io/name=promtail --no-headers | awk '{if(\$3 ~ /[0-9]+Mi/ && \$3+0 < 500) print \"OK\"; else print \"HIGH\"}' | grep -q OK"
else
    echo -e "${YELLOW}Skipping resource usage tests (metrics-server not available)${NC}"
fi

echo ""
echo "=== 10. Data Persistence and Retention ==="

# Check data directory exists
run_test "Loki data directory exists" \
    "kubectl exec -n $NAMESPACE deployment/loki -- ls -la /var/loki/chunks"

# Check retention configuration
run_test "Loki compactor is configured" \
    "kubectl logs -n $NAMESPACE deployment/loki --tail=100 | grep -q 'compactor'"

echo ""
echo "=== 11. Integration Testing ==="

# Test LogQL queries
run_test "LogQL basic query works" \
    "kubectl exec -n $NAMESPACE deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/query?query=up' | grep -q 'result'"

# Test label queries
run_test "LogQL label query works" \
    "kubectl exec -n $NAMESPACE deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/labels' | grep -q 'data'"

# Test series queries
run_test "LogQL series query works" \
    "kubectl exec -n $NAMESPACE deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/series?match[]={job=~\".+\"}' | grep -q 'data'"

echo ""
echo "=== 12. Security and RBAC ==="

# Check service accounts
run_test "Loki service account exists" \
    "kubectl get serviceaccount -n $NAMESPACE loki"

run_test "Promtail service account exists" \
    "kubectl get serviceaccount -n $NAMESPACE promtail"

# Check RBAC
run_test "Promtail has cluster role binding" \
    "kubectl get clusterrolebinding | grep -q promtail"

echo ""
echo "=== Validation Summary ==="
echo -e "Total tests: ${BLUE}$TOTAL_TESTS${NC}"
echo -e "Passed: ${GREEN}$PASSED_TESTS${NC}"
echo -e "Failed: ${RED}$FAILED_TESTS${NC}"

if [ $FAILED_TESTS -eq 0 ]; then
    echo -e "\n${GREEN}🎉 All logging stack tests passed!${NC}"
    echo -e "${GREEN}✅ Loki is ready for log aggregation${NC}"
    echo -e "${GREEN}✅ Promtail is collecting logs from all pods${NC}"
    echo -e "${GREEN}✅ Monitoring integration is working${NC}"
    echo -e "${GREEN}✅ Log retention and storage are configured${NC}"
else
    echo -e "\n${RED}❌ Some tests failed. Please check the issues above.${NC}"
fi

echo ""
echo "=== Access Information ==="
echo -e "${BLUE}Loki API:${NC}"
{% if create_loki_ingress | default(false) %}
echo -e "  External: https://$LOKI_DOMAIN"
{% endif %}
echo -e "  Internal: http://loki-gateway.$NAMESPACE.svc.cluster.local"
echo -e "  Direct: http://loki.$NAMESPACE.svc.cluster.local:3100"

echo -e "\n${BLUE}Grafana Integration:${NC}"
echo -e "  Data Source URL: http://loki-gateway.$NAMESPACE.svc.cluster.local"
{% if grafana_domain != 'grafana.local' %}
echo -e "  Grafana URL: https://$GRAFANA_DOMAIN/explore"
{% endif %}

echo -e "\n${BLUE}Sample LogQL Queries:${NC}"
echo -e "  All logs: {}"
echo -e "  Namespace logs: {namespace=\"kafka\"}"
echo -e "  Error logs: {level=\"ERROR\"}"
echo -e "  Pod logs: {pod=\"my-pod\"}"
echo -e "  Log search: {namespace=\"kafka\"} |= \"error\""
echo -e "  Rate query: rate({namespace=\"kafka\"}[5m])"

echo -e "\n${BLUE}Storage Information:${NC}"
echo -e "  Loki Storage: {{ loki_storage_size | default('50Gi') }}"
echo -e "  Storage Class: {{ loki_storage_class | default('longhorn') }}"
echo -e "  Retention Period: {{ loki_retention_period | default('168h') }} (7 days)"

echo -e "\n${BLUE}Log Collection:${NC}"
echo -e "  Promtail runs as DaemonSet on all nodes"
echo -e "  Collects logs from: /var/log/pods/"
echo -e "  Automatic Kubernetes metadata labeling"
echo -e "  Container and system log parsing"

exit $FAILED_TESTS 