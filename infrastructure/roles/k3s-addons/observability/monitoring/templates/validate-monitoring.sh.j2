#!/bin/bash

# Monitoring Stack Validation Script (kube-prometheus-stack)
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
NAMESPACE="monitoring"
GRAFANA_DOMAIN="{{ grafana_domain | default('grafana.local') }}"
PROMETHEUS_DOMAIN="{{ prometheus_domain | default('prometheus.local') }}"
ALERTMANAGER_DOMAIN="{{ alertmanager_domain | default('alertmanager.local') }}"
CREATE_INGRESS="{{ create_monitoring_ingress | default(false) }}"

echo -e "${BLUE}=== Monitoring Stack Validation ===${NC}"
echo "Validating kube-prometheus-stack deployment..."
echo ""

# Test counters
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Test function
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="${3:-0}"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "Testing $test_name... "
    
    if eval "$test_command" >/dev/null 2>&1; then
        if [ "$expected_result" = "0" ]; then
            echo -e "${GREEN}✓ PASS${NC}"
            PASSED_TESTS=$((PASSED_TESTS + 1))
        else
            echo -e "${RED}✗ FAIL${NC} (expected failure but command succeeded)"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        fi
    else
        if [ "$expected_result" = "1" ]; then
            echo -e "${GREEN}✓ PASS${NC} (expected failure)"
            PASSED_TESTS=$((PASSED_TESTS + 1))
        else
            echo -e "${RED}✗ FAIL${NC}"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        fi
    fi
}

# Test with details function
run_test_with_details() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="${3:-0}"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "Testing $test_name... "
    
    if result=$(eval "$test_command" 2>&1); then
        if [ "$expected_result" = "0" ]; then
            echo -e "${GREEN}✓ PASS${NC}"
            PASSED_TESTS=$((PASSED_TESTS + 1))
            return 0
        else
            echo -e "${RED}✗ FAIL${NC} (expected failure but command succeeded)"
            FAILED_TESTS=$((FAILED_TESTS + 1))
            return 1
        fi
    else
        if [ "$expected_result" = "1" ]; then
            echo -e "${GREEN}✓ PASS${NC} (expected failure)"
            PASSED_TESTS=$((PASSED_TESTS + 1))
            return 0
        else
            echo -e "${RED}✗ FAIL${NC}"
            echo -e "${YELLOW}Details: $result${NC}"
            FAILED_TESTS=$((FAILED_TESTS + 1))
            return 1
        fi
    fi
}

echo "=== 1. Namespace and Basic Resources ==="

# Check if monitoring namespace exists
run_test "monitoring namespace exists" \
    "kubectl get namespace $NAMESPACE"

# Check if Helm release exists
run_test "kube-prometheus-stack Helm release exists" \
    "helm list -n $NAMESPACE | grep -q kube-prometheus-stack"

echo ""
echo "=== 2. Pod Status and Health ==="

# Check Prometheus pods
run_test "Prometheus pods are running" \
    "kubectl get pods -n $NAMESPACE -l app.kubernetes.io/name=prometheus --field-selector=status.phase=Running | grep -q prometheus"

# Check Grafana pods
run_test "Grafana pods are running" \
    "kubectl get pods -n $NAMESPACE -l app.kubernetes.io/name=grafana --field-selector=status.phase=Running | grep -q grafana"

# Check AlertManager pods
run_test "AlertManager pods are running" \
    "kubectl get pods -n $NAMESPACE -l app.kubernetes.io/name=alertmanager --field-selector=status.phase=Running | grep -q alertmanager"

# Check Operator pod
run_test "Prometheus Operator pod is running" \
    "kubectl get pods -n $NAMESPACE -l app.kubernetes.io/name=prometheus-operator --field-selector=status.phase=Running | grep -q prometheus-operator"

# Check readiness
run_test "Prometheus pods are ready" \
    "kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=prometheus -n $NAMESPACE --timeout=120s"

run_test "Grafana pods are ready" \
    "kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=grafana -n $NAMESPACE --timeout=60s"

run_test "AlertManager pods are ready" \
    "kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=alertmanager -n $NAMESPACE --timeout=60s"

echo ""
echo "=== 3. Service Connectivity ==="

# Check services
run_test "Prometheus service exists" \
    "kubectl get service -n $NAMESPACE | grep -q prometheus"

run_test "Grafana service exists" \
    "kubectl get service -n $NAMESPACE | grep -q grafana"

run_test "AlertManager service exists" \
    "kubectl get service -n $NAMESPACE | grep -q alertmanager"

# Test API connectivity
run_test "Prometheus API is accessible" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q --spider http://localhost:9090/-/healthy"

run_test "Grafana API is accessible" \
    "kubectl exec -n $NAMESPACE deployment/kube-prometheus-stack-grafana -- wget -q --spider http://localhost:3000/api/health"

run_test "AlertManager API is accessible" \
    "kubectl exec -n $NAMESPACE statefulset/alertmanager-kube-prometheus-stack-alertmanager -- wget -q --spider http://localhost:9093/-/healthy"

echo ""
echo "=== 4. Storage and Persistence ==="

# Check Prometheus PVCs
run_test "Prometheus PVC exists" \
    "kubectl get pvc -n $NAMESPACE | grep -q prometheus"

run_test "Prometheus PVC is bound" \
    "kubectl get pvc -n $NAMESPACE -o jsonpath='{.items[?(@.metadata.name=~\"prometheus.*\")].status.phase}' | grep -q Bound"

# Check Grafana PVC (if enabled)
{% if grafana_persistence_enabled | default(true) %}
run_test "Grafana PVC exists" \
    "kubectl get pvc -n $NAMESPACE | grep -q grafana"

run_test "Grafana PVC is bound" \
    "kubectl get pvc -n $NAMESPACE -o jsonpath='{.items[?(@.metadata.name=~\"grafana.*\")].status.phase}' | grep -q Bound"
{% endif %}

# Check storage classes
run_test "Prometheus PVC uses correct storage class" \
    "kubectl get pvc -n $NAMESPACE -l app.kubernetes.io/name=prometheus -o jsonpath='{.items[0].spec.storageClassName}' | grep -q '{{ prometheus_storage_class }}'"

echo ""
echo "=== 5. Configuration Validation ==="

# Check Prometheus configuration
run_test "Prometheus config is valid" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- promtool check config /etc/prometheus/config_out/prometheus.env.yaml"

# Check AlertManager configuration
run_test "AlertManager config is valid" \
    "kubectl exec -n $NAMESPACE statefulset/alertmanager-kube-prometheus-stack-alertmanager -- amtool config check --config.file=/etc/alertmanager/config/alertmanager.yaml"

# Check Grafana configuration
run_test "Grafana datasources are configured" \
    "kubectl get configmap -n $NAMESPACE kube-prometheus-stack-grafana -o yaml | grep -q 'datasources.yaml'"

echo ""
echo "=== 6. Metrics Collection Testing ==="

# Test basic Prometheus queries
run_test "Prometheus can query itself" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q -O- 'http://localhost:9090/api/v1/query?query=up{job=\"prometheus\"}' | grep -q '\"result\"'"

# Test node metrics
run_test "Node metrics are available" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q -O- 'http://localhost:9090/api/v1/query?query=up{job=\"node-exporter\"}' | grep -q '\"result\"'"

# Test Kubernetes API server metrics
run_test "Kubernetes API server metrics are available" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q -O- 'http://localhost:9090/api/v1/query?query=up{job=\"apiserver\"}' | grep -q '\"result\"'"

# Test kubelet metrics
run_test "Kubelet metrics are available" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q -O- 'http://localhost:9090/api/v1/query?query=up{job=\"kubelet\"}' | grep -q '\"result\"'"

echo ""
echo "=== 7. ServiceMonitor and PrometheusRule Discovery ==="

# Check ServiceMonitors
run_test "ServiceMonitors are discovered" \
    "kubectl get servicemonitor -n $NAMESPACE | grep -q kube-prometheus-stack"

run_test "PrometheusRules are discovered" \
    "kubectl get prometheusrule -n $NAMESPACE | grep -q kube-prometheus-stack"

# Test if custom ServiceMonitors are working (if any exist)
if kubectl get servicemonitor --all-namespaces | grep -v "kube-prometheus-stack" | grep -q "servicemonitor"; then
    run_test "Custom ServiceMonitors are being scraped" \
        "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q -O- 'http://localhost:9090/api/v1/targets' | grep -q '\"health\":\"up\"'"
fi

echo ""
echo "=== 8. Alerting System ==="

# Check if AlertManager is receiving alerts
run_test "AlertManager is receiving configuration" \
    "kubectl exec -n $NAMESPACE statefulset/alertmanager-kube-prometheus-stack-alertmanager -- wget -q -O- 'http://localhost:9093/api/v1/status' | grep -q '\"configYAML\"'"

# Test alert rules are loaded
run_test "Prometheus alert rules are loaded" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q -O- 'http://localhost:9090/api/v1/rules' | grep -q '\"groups\"'"

# Check for firing alerts (should have some basic alerts)
run_test "Prometheus has some alert rules configured" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q -O- 'http://localhost:9090/api/v1/rules' | grep -q '\"name\"'"

echo ""
echo "=== 9. Grafana Integration ==="

# Test Grafana datasource
run_test "Grafana Prometheus datasource is configured" \
    "kubectl exec -n $NAMESPACE deployment/kube-prometheus-stack-grafana -- wget -q -O- 'http://localhost:3000/api/datasources' --header='Authorization: Bearer {{ grafana_admin_password | default(\"admin\") }}' | grep -q 'prometheus'"

# Test Grafana dashboards
run_test "Grafana has dashboards installed" \
    "kubectl exec -n $NAMESPACE deployment/kube-prometheus-stack-grafana -- wget -q -O- 'http://localhost:3000/api/search' --header='Authorization: Bearer {{ grafana_admin_password | default(\"admin\") }}' | grep -q 'title'"

# Test Grafana health
run_test "Grafana health endpoint responds" \
    "kubectl exec -n $NAMESPACE deployment/kube-prometheus-stack-grafana -- wget -q -O- 'http://localhost:3000/api/health' | grep -q 'ok'"

echo ""
echo "=== 10. Network and Ingress ==="

{% if create_monitoring_ingress | default(false) %}
# Check ingresses
run_test "Grafana ingress exists" \
    "kubectl get ingress -n $NAMESPACE grafana-ingress"

run_test "Prometheus ingress exists" \
    "kubectl get ingress -n $NAMESPACE prometheus-ingress"

run_test "AlertManager ingress exists" \
    "kubectl get ingress -n $NAMESPACE alertmanager-ingress"

# Check ingress hosts
run_test "Grafana ingress has correct host" \
    "kubectl get ingress -n $NAMESPACE grafana-ingress -o jsonpath='{.spec.rules[0].host}' | grep -q '$GRAFANA_DOMAIN'"

run_test "Prometheus ingress has correct host" \
    "kubectl get ingress -n $NAMESPACE prometheus-ingress -o jsonpath='{.spec.rules[0].host}' | grep -q '$PROMETHEUS_DOMAIN'"

# Check TLS configuration
run_test "Grafana ingress has TLS configured" \
    "kubectl get ingress -n $NAMESPACE grafana-ingress -o jsonpath='{.spec.tls[0].secretName}' | grep -q 'grafana-tls'"
{% endif %}

# Test internal DNS resolution
run_test "Prometheus DNS resolves internally" \
    "kubectl run dns-test --image=busybox:1.35 --rm -it --restart=Never -- nslookup kube-prometheus-stack-prometheus.$NAMESPACE.svc.cluster.local"

echo ""
echo "=== 11. Performance and Resource Usage ==="

# Check resource usage
if kubectl top pods -n $NAMESPACE >/dev/null 2>&1; then
    run_test "Prometheus resource usage is reasonable" \
        "kubectl top pods -n $NAMESPACE -l app.kubernetes.io/name=prometheus --no-headers | awk '{if(\$3 ~ /[0-9]+Mi/ && \$3+0 < 8000) print \"OK\"; else print \"HIGH\"}' | grep -q OK"
    
    run_test "Grafana resource usage is reasonable" \
        "kubectl top pods -n $NAMESPACE -l app.kubernetes.io/name=grafana --no-headers | awk '{if(\$3 ~ /[0-9]+Mi/ && \$3+0 < 1000) print \"OK\"; else print \"HIGH\"}' | grep -q OK"
else
    echo -e "${YELLOW}Skipping resource usage tests (metrics-server not available)${NC}"
fi

echo ""
echo "=== 12. Data Retention and TSDB ==="

# Check Prometheus TSDB
run_test "Prometheus TSDB directory exists" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- ls -la /prometheus"

# Check retention settings
run_test "Prometheus retention is configured" \
    "kubectl get prometheus -n $NAMESPACE kube-prometheus-stack-prometheus -o jsonpath='{.spec.retention}' | grep -q '{{ prometheus_retention }}'"

echo ""
echo "=== 13. Integration Testing ==="

# Test metric queries that should work
run_test "Node CPU metrics are available" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q -O- 'http://localhost:9090/api/v1/query?query=node_cpu_seconds_total' | grep -q '\"result\"'"

run_test "Pod memory metrics are available" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q -O- 'http://localhost:9090/api/v1/query?query=container_memory_usage_bytes' | grep -q '\"result\"'"

run_test "Cluster info metrics are available" \
    "kubectl exec -n $NAMESPACE statefulset/prometheus-kube-prometheus-stack-prometheus -- wget -q -O- 'http://localhost:9090/api/v1/query?query=kubernetes_build_info' | grep -q '\"result\"'"

echo ""
echo "=== 14. Security and RBAC ==="

# Check service accounts
run_test "Prometheus service account exists" \
    "kubectl get serviceaccount -n $NAMESPACE kube-prometheus-stack-prometheus"

run_test "Grafana service account exists" \
    "kubectl get serviceaccount -n $NAMESPACE kube-prometheus-stack-grafana"

run_test "Prometheus Operator service account exists" \
    "kubectl get serviceaccount -n $NAMESPACE kube-prometheus-stack-prometheus-operator"

# Check RBAC
run_test "Prometheus has cluster role binding" \
    "kubectl get clusterrolebinding | grep -q kube-prometheus-stack-prometheus"

run_test "Prometheus Operator has cluster role binding" \
    "kubectl get clusterrolebinding | grep -q kube-prometheus-stack-prometheus-operator"

echo ""
echo "=== 15. Custom Resource Definitions ==="

# Check CRDs
run_test "Prometheus CRD exists" \
    "kubectl get crd prometheuses.monitoring.coreos.com"

run_test "ServiceMonitor CRD exists" \
    "kubectl get crd servicemonitors.monitoring.coreos.com"

run_test "PrometheusRule CRD exists" \
    "kubectl get crd prometheusrules.monitoring.coreos.com"

run_test "AlertManager CRD exists" \
    "kubectl get crd alertmanagers.monitoring.coreos.com"

echo ""
echo "=== Validation Summary ==="
echo -e "Total tests: ${BLUE}$TOTAL_TESTS${NC}"
echo -e "Passed: ${GREEN}$PASSED_TESTS${NC}"
echo -e "Failed: ${RED}$FAILED_TESTS${NC}"

if [ $FAILED_TESTS -eq 0 ]; then
    echo -e "\n${GREEN}🎉 All monitoring stack tests passed!${NC}"
    echo -e "${GREEN}✅ Prometheus is collecting metrics${NC}"
    echo -e "${GREEN}✅ Grafana is ready with dashboards${NC}"
    echo -e "${GREEN}✅ AlertManager is configured for alerting${NC}"
    echo -e "${GREEN}✅ All components are properly integrated${NC}"
else
    echo -e "\n${RED}❌ Some tests failed. Please check the issues above.${NC}"
fi

echo ""
echo "=== Access Information ==="
{% if create_monitoring_ingress | default(false) %}
echo -e "${BLUE}External Access (configure DNS or /etc/hosts):${NC}"
echo -e "  Grafana: https://$GRAFANA_DOMAIN"
echo -e "  Prometheus: https://$PROMETHEUS_DOMAIN"
echo -e "  AlertManager: https://$ALERTMANAGER_DOMAIN"
echo ""
{% endif %}
echo -e "${BLUE}Internal Access:${NC}"
echo -e "  Grafana: http://kube-prometheus-stack-grafana.$NAMESPACE.svc.cluster.local"
echo -e "  Prometheus: http://kube-prometheus-stack-prometheus.$NAMESPACE.svc.cluster.local:9090"
echo -e "  AlertManager: http://kube-prometheus-stack-alertmanager.$NAMESPACE.svc.cluster.local:9093"

echo -e "\n${BLUE}Default Credentials:${NC}"
echo -e "  Grafana Username: admin"
echo -e "  Grafana Password: {{ grafana_admin_password | default('admin') }}"

echo -e "\n${BLUE}Storage Information:${NC}"
echo -e "  Prometheus Storage: {{ prometheus_storage_size | default('50Gi') }}"
echo -e "  Prometheus Retention: {{ prometheus_retention | default('30d') }}"
{% if grafana_persistence_enabled | default(true) %}
echo -e "  Grafana Storage: {{ grafana_storage_size | default('10Gi') }}"
{% endif %}
echo -e "  Storage Class: {{ prometheus_storage_class | default('longhorn') }}"

echo -e "\n${BLUE}Key Features:${NC}"
echo -e "  📊 Pre-configured Kubernetes dashboards"
echo -e "  🚨 Built-in alerting rules for cluster health"
echo -e "  📈 Node, pod, and application metrics"
echo -e "  🔍 ServiceMonitor auto-discovery"
echo -e "  📱 AlertManager for notification routing"

echo -e "\n${BLUE}Next Steps:${NC}"
echo -e "  1. Access Grafana and explore the pre-built dashboards"
echo -e "  2. Configure AlertManager notification channels (Slack, email, etc.)"
echo -e "  3. Create custom dashboards for your applications"
echo -e "  4. Set up ServiceMonitors for your services"
echo -e "  5. Configure PrometheusRules for application-specific alerts"

exit $FAILED_TESTS 