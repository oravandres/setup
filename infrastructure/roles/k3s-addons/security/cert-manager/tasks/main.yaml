---
# cert-manager v1.15 Role - Main Tasks
- name: Add cert-manager Helm repository
  kubernetes.core.helm_repository:
    name: cert-manager
    repo_url: https://charts.jetstack.io
    state: present

- name: Update Helm repositories
  kubernetes.core.helm:
    name: dummy
    chart_ref: dummy
    release_namespace: dummy
    state: absent
    update_repo_cache: yes

- name: Create cert-manager namespace
  kubernetes.core.k8s:
    name: cert-manager
    api_version: v1
    kind: Namespace
    state: present

- name: Create Cloudflare API token secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: cloudflare-api-token-secret
        namespace: cert-manager
      type: Opaque
      stringData:
        api-token: "{{ cloudflare_api_token }}"
    state: present
  when: cloudflare_api_token is defined

- name: Install cert-manager via Helm
  kubernetes.core.helm:
    name: cert-manager
    chart_ref: cert-manager/cert-manager
    release_namespace: cert-manager
    chart_version: "{{ cert_manager_chart_version | default('v1.15.0') }}"
    values: "{{ cert_manager_values }}"
    create_namespace: true
    wait: true
    wait_condition:
      type: Ready
      status: "True"
    wait_timeout: 300s

- name: Wait for cert-manager pods to become ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: cert-manager
    label_selectors:
      - app.kubernetes.io/name=cert-manager
  register: cert_manager_pods
  until: cert_manager_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length == (cert_manager_pods.resources | length)
  retries: 30
  delay: 10

- name: Create Let's Encrypt staging ClusterIssuer
  kubernetes.core.k8s:
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-staging
      spec:
        acme:
          email: "{{ letsencrypt_email }}"
          server: https://acme-staging-v02.api.letsencrypt.org/directory
          privateKeySecretRef:
            name: letsencrypt-staging-private-key
          solvers:
            - dns01:
                cloudflare:
                  email: "{{ letsencrypt_email }}"
                  apiTokenSecretRef:
                    name: cloudflare-api-token-secret
                    key: api-token
              selector:
                dnsZones: "{{ dns_zones }}"
    state: present
  when: letsencrypt_email is defined and dns_zones is defined

- name: Create Let's Encrypt production ClusterIssuer
  kubernetes.core.k8s:
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-production
      spec:
        acme:
          email: "{{ letsencrypt_email }}"
          server: https://acme-v02.api.letsencrypt.org/directory
          privateKeySecretRef:
            name: letsencrypt-production-private-key
          solvers:
            - dns01:
                cloudflare:
                  email: "{{ letsencrypt_email }}"
                  apiTokenSecretRef:
                    name: cloudflare-api-token-secret
                    key: api-token
              selector:
                dnsZones: "{{ dns_zones }}"
    state: present
  when: letsencrypt_email is defined and dns_zones is defined

- name: Create wildcard certificate
  kubernetes.core.k8s:
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: wildcard-cert
        namespace: "{{ wildcard_cert_namespace | default('default') }}"
      spec:
        secretName: wildcard-tls-secret
        duration: 2160h  # 90 days
        renewBefore: 360h  # 15 days
        subject:
          organizations:
            - "{{ organization_name | default('HomeCluster') }}"
        commonName: "{{ base_domain }}"
        dnsNames:
          - "{{ base_domain }}"
          - "*.{{ base_domain }}"
        issuerRef:
          name: "{{ cert_issuer | default('letsencrypt-staging') }}"
          kind: ClusterIssuer
    state: present
  when: base_domain is defined and create_wildcard_cert | default(false) | bool

- name: Deploy cert-manager validation script
  template:
    src: validate-cert-manager.sh.j2
    dest: /usr/local/bin/validate-cert-manager
    mode: '0755'
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true

- name: Run cert-manager validation
  command: /usr/local/bin/validate-cert-manager
  register: cert_manager_validation
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true

- name: Display cert-manager validation results
  debug:
    var: cert_manager_validation.stdout_lines
  run_once: true 