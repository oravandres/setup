#!/bin/bash
# cert-manager v1.15 Validation Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

echo "=== cert-manager v1.15 Validation Script ==="
echo "Timestamp: $(date)"
echo "Node: $(hostname)"
echo

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test results
TESTS_PASSED=0
TESTS_FAILED=0

# Function to run test
run_test() {
    local test_name="$1"
    local test_command="$2"
    echo -n "Testing $test_name... "
    
    if eval "$test_command" &>/dev/null; then
        echo -e "${GREEN}PASS${NC}"
        ((TESTS_PASSED++))
        return 0
    else
        echo -e "${RED}FAIL${NC}"
        ((TESTS_FAILED++))
        return 1
    fi
}

# Function to show detailed info
show_info() {
    echo -e "\n${YELLOW}=== cert-manager Deployment Information ===${NC}"
    
    echo -e "\n${YELLOW}Namespace:${NC}"
    kubectl get namespace cert-manager 2>/dev/null || echo "cert-manager namespace not found"
    
    echo -e "\n${YELLOW}Pods:${NC}"
    kubectl get pods -n cert-manager -o wide 2>/dev/null || echo "No cert-manager pods found"
    
    echo -e "\n${YELLOW}Services:${NC}"
    kubectl get services -n cert-manager 2>/dev/null || echo "No cert-manager services found"
    
    echo -e "\n${YELLOW}ClusterIssuers:${NC}"
    kubectl get clusterissuers -o wide 2>/dev/null || echo "No ClusterIssuers found"
    
    echo -e "\n${YELLOW}Certificates:${NC}"
    kubectl get certificates --all-namespaces -o wide 2>/dev/null || echo "No Certificates found"
    
    echo -e "\n${YELLOW}CertificateRequests:${NC}"
    kubectl get certificaterequests --all-namespaces -o wide 2>/dev/null || echo "No CertificateRequests found"
    
    echo -e "\n${YELLOW}Secrets (TLS):${NC}"
    kubectl get secrets --all-namespaces --field-selector type=kubernetes.io/tls -o wide 2>/dev/null || echo "No TLS secrets found"
}

echo "=== Running cert-manager Tests ==="

# Test 1: Check if cert-manager namespace exists
run_test "cert-manager namespace exists" \
    "kubectl get namespace cert-manager"

# Test 2: Check if cert-manager pods are running
run_test "cert-manager pods are running" \
    "kubectl get pods -n cert-manager -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

# Test 3: Check if cert-manager deployment is ready
run_test "cert-manager deployment is ready" \
    "kubectl get deployment cert-manager -n cert-manager -o jsonpath='{.status.readyReplicas}' | grep -q '[1-9]'"

# Test 4: Check if cert-manager-webhook is ready
run_test "cert-manager-webhook deployment is ready" \
    "kubectl get deployment cert-manager-webhook -n cert-manager -o jsonpath='{.status.readyReplicas}' | grep -q '[1-9]'"

# Test 5: Check if cert-manager-cainjector is ready
run_test "cert-manager-cainjector deployment is ready" \
    "kubectl get deployment cert-manager-cainjector -n cert-manager -o jsonpath='{.status.readyReplicas}' | grep -q '[1-9]'"

# Test 6: Check if cert-manager CRDs are installed
run_test "cert-manager CRDs are installed" \
    "kubectl get crd certificates.cert-manager.io clusterissuers.cert-manager.io issuers.cert-manager.io"

# Test 7: Check if webhook is responding
run_test "cert-manager webhook is responding" \
    "kubectl get validatingwebhookconfigurations cert-manager-webhook"

# Test 8: Check if staging ClusterIssuer exists (if configured)
if kubectl get clusterissuer letsencrypt-staging &>/dev/null; then
    run_test "Let's Encrypt staging ClusterIssuer exists" \
        "kubectl get clusterissuer letsencrypt-staging -o jsonpath='{.status.conditions[0].status}' | grep -q 'True'"
fi

# Test 9: Check if production ClusterIssuer exists (if configured)
if kubectl get clusterissuer letsencrypt-production &>/dev/null; then
    run_test "Let's Encrypt production ClusterIssuer exists" \
        "kubectl get clusterissuer letsencrypt-production -o jsonpath='{.status.conditions[0].status}' | grep -q 'True'"
fi

# Test 10: Check if Cloudflare API token secret exists (if configured)
if kubectl get secret cloudflare-api-token-secret -n cert-manager &>/dev/null; then
    run_test "Cloudflare API token secret exists" \
        "kubectl get secret cloudflare-api-token-secret -n cert-manager -o jsonpath='{.data.api-token}' | base64 -d | wc -c | grep -q '[1-9]'"
fi

# Test 11: Check if wildcard certificate exists (if configured)
if kubectl get certificate wildcard-cert --all-namespaces &>/dev/null; then
    run_test "Wildcard certificate exists" \
        "kubectl get certificate wildcard-cert --all-namespaces -o jsonpath='{.items[0].status.conditions[0].status}' | grep -q 'True'"
fi

# Test 12: Check cert-manager logs for errors
run_test "cert-manager logs are healthy" \
    "! kubectl logs -n cert-manager deployment/cert-manager --tail=50 | grep -i error"

echo
echo "=== Test Summary ==="
echo -e "Tests passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Tests failed: ${RED}$TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "\n${GREEN}✅ All cert-manager tests passed!${NC}"
    show_info
    exit 0
else
    echo -e "\n${RED}❌ Some cert-manager tests failed!${NC}"
    show_info
    exit 1
fi 