#!/bin/bash
# TLS Automation Comprehensive Validation Script
# Tests cert-manager v1.15 + external-dns v0.14 + Cloudflare integration
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

echo "=== TLS Automation Comprehensive Validation ==="
echo "cert-manager: v{{ cert_manager_chart_version | default('1.15.0') }}"
echo "external-dns: v{{ external_dns_chart_version | default('1.14.1') }}"
echo "Timestamp: $(date)"
echo "Node: $(hostname)"
echo

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test results
TESTS_PASSED=0
TESTS_FAILED=0

# Function to run test
run_test() {
    local test_name="$1"
    local test_command="$2"
    echo -n "Testing $test_name... "
    
    if eval "$test_command" &>/dev/null; then
        echo -e "${GREEN}PASS${NC}"
        ((TESTS_PASSED++))
        return 0
    else
        echo -e "${RED}FAIL${NC}"
        ((TESTS_FAILED++))
        return 1
    fi
}

# Function to run info test (always passes, just shows info)
run_info() {
    local test_name="$1"
    local test_command="$2"
    echo -n "Checking $test_name... "
    
    local result
    result=$(eval "$test_command" 2>/dev/null || echo "Not available")
    echo -e "${BLUE}$result${NC}"
}

# Function to show detailed info
show_info() {
    echo -e "\n${YELLOW}=== TLS Automation System Information ===${NC}"
    
    echo -e "\n${YELLOW}cert-manager Status:${NC}"
    kubectl get pods -n cert-manager -o wide 2>/dev/null || echo "cert-manager not found"
    
    echo -e "\n${YELLOW}external-dns Status:${NC}"
    kubectl get pods -n external-dns -o wide 2>/dev/null || echo "external-dns not found"
    
    echo -e "\n${YELLOW}ClusterIssuers:${NC}"
    kubectl get clusterissuers -o wide 2>/dev/null || echo "No ClusterIssuers found"
    
    echo -e "\n${YELLOW}Certificates:${NC}"
    kubectl get certificates --all-namespaces -o wide 2>/dev/null || echo "No Certificates found"
    
    echo -e "\n${YELLOW}TLS Secrets:${NC}"
    kubectl get secrets --all-namespaces --field-selector type=kubernetes.io/tls -o wide 2>/dev/null || echo "No TLS secrets found"
    
    echo -e "\n${YELLOW}LoadBalancer Services (for external-dns):${NC}"
    kubectl get services --all-namespaces --field-selector spec.type=LoadBalancer -o wide 2>/dev/null || echo "No LoadBalancer services found"
    
    echo -e "\n${YELLOW}Ingress Resources:${NC}"
    kubectl get ingress --all-namespaces -o wide 2>/dev/null || echo "No Ingress resources found"
}

echo "=== Running TLS Automation Tests ==="

# Section 1: cert-manager Tests
echo -e "\n${YELLOW}=== cert-manager Tests ===${NC}"

run_test "cert-manager namespace exists" \
    "kubectl get namespace cert-manager"

run_test "cert-manager pods are running" \
    "kubectl get pods -n cert-manager -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

run_test "cert-manager deployment is ready" \
    "kubectl get deployment cert-manager -n cert-manager -o jsonpath='{.status.readyReplicas}' | grep -q '[1-9]'"

run_test "cert-manager-webhook is ready" \
    "kubectl get deployment cert-manager-webhook -n cert-manager -o jsonpath='{.status.readyReplicas}' | grep -q '[1-9]'"

run_test "cert-manager-cainjector is ready" \
    "kubectl get deployment cert-manager-cainjector -n cert-manager -o jsonpath='{.status.readyReplicas}' | grep -q '[1-9]'"

run_test "cert-manager CRDs are installed" \
    "kubectl get crd certificates.cert-manager.io clusterissuers.cert-manager.io issuers.cert-manager.io"

run_test "Cloudflare API token secret exists (cert-manager)" \
    "kubectl get secret cloudflare-api-token-secret -n cert-manager"

# Section 2: external-dns Tests  
echo -e "\n${YELLOW}=== external-dns Tests ===${NC}"

run_test "external-dns namespace exists" \
    "kubectl get namespace external-dns"

run_test "external-dns pods are running" \
    "kubectl get pods -n external-dns -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'"

run_test "external-dns deployment is ready" \
    "kubectl get deployment external-dns -n external-dns -o jsonpath='{.status.readyReplicas}' | grep -q '[1-9]'"

run_test "Cloudflare API token secret exists (external-dns)" \
    "kubectl get secret cloudflare-api-token -n external-dns"

run_test "external-dns is processing DNS records" \
    "kubectl logs -n external-dns deployment/external-dns --tail=50 | grep -i 'processing'"

# Section 3: ClusterIssuer Tests
echo -e "\n${YELLOW}=== ClusterIssuer Tests ===${NC}"

if kubectl get clusterissuer letsencrypt-staging &>/dev/null; then
    run_test "Let's Encrypt staging ClusterIssuer is ready" \
        "kubectl get clusterissuer letsencrypt-staging -o jsonpath='{.status.conditions[0].status}' | grep -q 'True'"
fi

if kubectl get clusterissuer letsencrypt-production &>/dev/null; then
    run_test "Let's Encrypt production ClusterIssuer is ready" \
        "kubectl get clusterissuer letsencrypt-production -o jsonpath='{.status.conditions[0].status}' | grep -q 'True'"
fi

# Section 4: Integration Tests
echo -e "\n${YELLOW}=== Integration Tests ===${NC}"

run_test "cert-manager webhook is responding" \
    "kubectl get validatingwebhookconfigurations cert-manager-webhook"

run_test "external-dns connected to Cloudflare" \
    "kubectl logs -n external-dns deployment/external-dns --tail=100 | grep -i 'cloudflare'"

run_test "No critical errors in cert-manager logs" \
    "! kubectl logs -n cert-manager deployment/cert-manager --tail=50 | grep -i 'error'"

run_test "No critical errors in external-dns logs" \
    "! kubectl logs -n external-dns deployment/external-dns --tail=100 | grep -i 'error.*cloudflare'"

# Section 5: Monitoring Tests (if Prometheus is available)
echo -e "\n${YELLOW}=== Monitoring Tests ===${NC}"

if kubectl get crd servicemonitors.monitoring.coreos.com &>/dev/null; then
    if kubectl get servicemonitor cert-manager -n cert-manager &>/dev/null; then
        run_test "cert-manager ServiceMonitor exists" \
            "kubectl get servicemonitor cert-manager -n cert-manager"
    fi
    
    if kubectl get servicemonitor external-dns -n external-dns &>/dev/null; then
        run_test "external-dns ServiceMonitor exists" \
            "kubectl get servicemonitor external-dns -n external-dns"
    fi
fi

# Section 6: Test Resources (if created)
echo -e "\n${YELLOW}=== Test Resources ===${NC}"

if kubectl get service tls-test-service -n default &>/dev/null; then
    run_test "TLS test service exists" \
        "kubectl get service tls-test-service -n default"
fi

if kubectl get ingress tls-test-ingress -n default &>/dev/null; then
    run_test "TLS test ingress exists" \
        "kubectl get ingress tls-test-ingress -n default"
fi

# Section 7: Information Display
echo -e "\n${YELLOW}=== System Information ===${NC}"

run_info "cert-manager version" \
    "kubectl get deployment cert-manager -n cert-manager -o jsonpath='{.spec.template.spec.containers[0].image}' | cut -d: -f2"

run_info "external-dns version" \
    "kubectl get deployment external-dns -n external-dns -o jsonpath='{.spec.template.spec.containers[0].image}' | cut -d: -f2"

run_info "Active ClusterIssuers" \
    "kubectl get clusterissuers -o jsonpath='{.items[*].metadata.name}' | tr ' ' ','"

{% if dns_zones is defined %}
run_info "Configured DNS zones" \
    "echo '{{ dns_zones | join(',') }}'"
{% endif %}

run_info "LoadBalancer services count" \
    "kubectl get services --all-namespaces --field-selector spec.type=LoadBalancer --no-headers | wc -l"

run_info "Ingress resources count" \
    "kubectl get ingress --all-namespaces --no-headers | wc -l"

run_info "TLS certificates count" \
    "kubectl get certificates --all-namespaces --no-headers | wc -l"

echo
echo "=== Test Summary ==="
echo -e "Tests passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Tests failed: ${RED}$TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "\n${GREEN}‚úÖ All TLS automation tests passed!${NC}"
    echo -e "${GREEN}üîí TLS automation system is ready for production use${NC}"
    show_info
    
    echo -e "\n${YELLOW}Next Steps:${NC}"
    echo "1. Create Ingress resources with cert-manager.io/cluster-issuer annotation"
    echo "2. Add external-dns.alpha.kubernetes.io/hostname annotation to Services"
    echo "3. Monitor certificate issuance: kubectl logs -n cert-manager deployment/cert-manager -f"
    echo "4. Monitor DNS record creation: kubectl logs -n external-dns deployment/external-dns -f"
    {% if cert_issuer == 'letsencrypt-staging' %}
    echo "5. Switch to production issuer after testing: letsencrypt-production"
    {% endif %}
    
    exit 0
else
    echo -e "\n${RED}‚ùå Some TLS automation tests failed!${NC}"
    echo -e "${RED}üö® Review the issues above before proceeding${NC}"
    show_info
    exit 1
fi 