---
# System preparation tasks
- name: Update package cache (Ubuntu/Debian)
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install required packages
  apt:
    name:
      - curl
      - wget
      - software-properties-common
    state: present

# k3s installation preparation
- name: Create k3s directory
  file:
    path: /etc/rancher/k3s
    state: directory
    mode: '0755'

- name: Check if k3s is already installed
  stat:
    path: /usr/local/bin/k3s
  register: k3s_installed

# Debug information
- name: Debug node information
  debug:
    msg:
      - "Current node: {{ inventory_hostname }}"
      - "ansible_host: {{ ansible_host | default('not_set') }}"
      - "k3s_servers group: {{ groups['k3s_servers'] | default(['not_defined']) }}"
      - "k3s_workers group: {{ groups['k3s_workers'] | default(['not_defined']) }}"
      - "First server: {{ groups['k3s_servers'][0] | default('not_defined') }}"
      - "k3s already installed: {{ k3s_installed.stat.exists }}"
      - "Is first server: {{ inventory_hostname == groups['k3s_servers'][0] }}"
      - "Is additional server: {{ inventory_hostname in groups['k3s_servers'] and inventory_hostname != groups['k3s_servers'][0] }}"
      - "Is worker: {{ inventory_hostname in groups['k3s_workers'] | default(false) }}"

# Set external IP for localhost (dream-machine)
- name: Set external IP for localhost
  set_fact:
    external_ip: "192.168.1.52"
  when: inventory_hostname == "localhost"

- name: Set external IP for all remote hosts
  set_fact:
    external_ip: "{{ ansible_host }}"
  when: inventory_hostname != "localhost"

# Debug external IP
- name: Debug external IP setting
  debug:
    msg: "External IP for {{ inventory_hostname }}: {{ external_ip | default('not_set') }}"

# k3s installation tasks
- name: Install k3s on first server node (cluster init)
  shell: |
    curl -sfL https://get.k3s.io | K3S_TOKEN={{ k3s_token }} sh -s - server \
      --cluster-init \
      --disable=traefik \
      --write-kubeconfig-mode=644 \
      --node-ip={{ external_ip }}
  when: 
    - inventory_hostname == groups['k3s_servers'][0]
    - not k3s_installed.stat.exists
  register: first_server_install

- name: Debug first server installation
  debug:
    msg: "First server installation result: {{ first_server_install.rc | default('skipped') }}"
  when: inventory_hostname == groups['k3s_servers'][0]

# Wait for first server to be ready - runs on all nodes that need it
- name: Wait for first server to be ready (for additional servers)
  wait_for:
    host: "{{ hostvars[groups['k3s_servers'][0]]['external_ip'] | default(hostvars[groups['k3s_servers'][0]]['ansible_host']) }}"
    port: 6443
    timeout: 300
  when: 
    - inventory_hostname in groups['k3s_servers']
    - inventory_hostname != groups['k3s_servers'][0]
    - not k3s_installed.stat.exists

- name: Wait for first server to be ready (for workers)
  wait_for:
    host: "{{ hostvars[groups['k3s_servers'][0]]['external_ip'] | default(hostvars[groups['k3s_servers'][0]]['ansible_host']) }}"
    port: 6443
    timeout: 300
  when: 
    - inventory_hostname in groups['k3s_workers'] | default([])
    - not k3s_installed.stat.exists

- name: Install k3s on additional server nodes
  shell: |
    curl -sfL https://get.k3s.io | K3S_TOKEN={{ k3s_token }} sh -s - server \
      --server https://{{ hostvars[groups['k3s_servers'][0]]['external_ip'] | default(hostvars[groups['k3s_servers'][0]]['ansible_host']) }}:6443 \
      --disable=traefik \
      --write-kubeconfig-mode=644 \
      --node-ip={{ external_ip }}
  when: 
    - inventory_hostname in groups['k3s_servers']
    - inventory_hostname != groups['k3s_servers'][0]
    - not k3s_installed.stat.exists
  register: additional_server_install

- name: Debug additional server installation
  debug:
    msg: "Additional server installation result: {{ additional_server_install.rc | default('skipped') }}"
  when: 
    - inventory_hostname in groups['k3s_servers']
    - inventory_hostname != groups['k3s_servers'][0]

- name: Install k3s on worker nodes (agents)
  shell: |
    curl -sfL https://get.k3s.io | K3S_TOKEN={{ k3s_token }} sh -s - agent \
      --server https://{{ hostvars[groups['k3s_servers'][0]]['external_ip'] | default(hostvars[groups['k3s_servers'][0]]['ansible_host']) }}:6443 \
      --node-ip={{ external_ip }}
  when: 
    - inventory_hostname in groups['k3s_workers'] | default([])
    - not k3s_installed.stat.exists
  register: worker_install

- name: Debug worker installation
  debug:
    msg: "Worker installation result: {{ worker_install.rc | default('skipped') }}"
  when: inventory_hostname in groups['k3s_workers'] | default([])

# Service management
- name: Enable and start k3s service on server nodes
  systemd:
    name: k3s
    enabled: yes
    state: started
  when: inventory_hostname in groups['k3s_servers']

- name: Enable and start k3s-agent service on worker nodes
  systemd:
    name: k3s-agent
    enabled: yes
    state: started
  when: inventory_hostname in groups['k3s_workers'] | default([])

- name: Create .kube directory for ansible user
  file:
    path: /home/{{ ansible_user }}/.kube
    state: directory
    mode: '0700'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: 
    - inventory_hostname in groups['k3s_servers']
    - ansible_user != 'root'

- name: Set up kubeconfig symlink for ansible user
  file:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /home/{{ ansible_user }}/.kube/config
    state: link
    force: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: 
    - inventory_hostname in groups['k3s_servers']
    - ansible_user != 'root'

# Post-installation tasks
- name: Wait for all nodes to be ready
  shell: k3s kubectl get nodes --no-headers | grep -c Ready
  register: ready_nodes
  until: ready_nodes.stdout|int == (groups['k3s_servers']|length + groups['k3s_workers']|default([])|length)
  retries: 30
  delay: 10
  when: inventory_hostname == groups['k3s_servers'][0]

- name: Display cluster status
  shell: k3s kubectl get nodes -o wide
  register: cluster_status
  when: inventory_hostname == groups['k3s_servers'][0]

- name: Show cluster nodes
  debug:
    msg: "{{ cluster_status.stdout_lines }}"
  when: 
    - inventory_hostname == groups['k3s_servers'][0]
    - cluster_status is defined

# Local kubectl setup
- name: Create local kubeconfig directory
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0700'
  delegate_to: localhost
  run_once: true
  become: false
  when: inventory_hostname == groups['k3s_servers'][0]

- name: Copy kubeconfig to local machine
  fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ ansible_env.HOME }}/.kube/k3s-config"
    flat: yes
  when: inventory_hostname == groups['k3s_servers'][0]
  become: false

- name: Update kubeconfig server URL
  replace:
    path: "{{ ansible_env.HOME }}/.kube/k3s-config"
    regexp: 'https://127\.0\.0\.1:6443'
    replace: "https://{{ hostvars[groups['k3s_servers'][0]]['external_ip'] | default(hostvars[groups['k3s_servers'][0]]['ansible_host']) }}:6443"
  delegate_to: localhost
  run_once: true
  become: false
  when: inventory_hostname == groups['k3s_servers'][0]

- name: Display cluster information
  debug:
    msg:
      - "k3s HA cluster with embedded etcd has been successfully deployed!"
      - "Server nodes (control plane + etcd): {{ groups['k3s_servers'] | join(', ') }}"
      - "Worker nodes (agents): {{ groups['k3s_workers'] | default([]) | join(', ') }}"
      - "Cluster token: {{ k3s_token }}"
      - "First server external IP: {{ hostvars[groups['k3s_servers'][0]]['external_ip'] | default(hostvars[groups['k3s_servers'][0]]['ansible_host']) }}"
      - "To use kubectl locally:"
      - "  export KUBECONFIG={{ ansible_env.HOME }}/.kube/k3s-config"
      - "  kubectl get nodes -o wide"
  run_once: true
  when: inventory_hostname == groups['k3s_servers'][0]