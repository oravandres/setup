---
- name: Deploy k3s HA cluster with embedded etcd
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # Node definitions - localhost as initial master, then other servers
    k3s_servers:
      - { name: "localhost", ip: "127.0.0.1", user: "{{ lookup('env', 'USER') }}", ansible_connection: "local" }
      - { name: "pi-c1", ip: "192.168.1.145", user: "pi" }
      - { name: "pi-c2", ip: "192.168.1.162", user: "pi" }
    
    k3s_workers:
      - { name: "pi-n1", ip: "192.168.1.150", user: "pi" }
      - { name: "pi-n2", ip: "192.168.1.8", user: "pi" }
      - { name: "pi-n3", ip: "192.168.1.230", user: "pi" }
      - { name: "pi-n4", ip: "192.168.1.206", user: "pi" }
    
    # Always cleanup existing k3s installations
    cleanup_k3s: true

  tasks:
    # Generate secure k3s token
    - name: Generate k3s cluster token
      shell: openssl rand -hex 32
      register: generated_token
      run_once: true

    - name: Set k3s token variable
      set_fact:
        k3s_token: "{{ generated_token.stdout }}"
      run_once: true

    - name: Debug generated token
      debug:
        msg: "Generated k3s token: {{ k3s_token }}"
      run_once: true

    # Create dynamic inventory
    - name: Add k3s server nodes to inventory
      add_host:
        name: "{{ item.name }}"
        ansible_host: "{{ item.ip }}"
        ansible_user: "{{ item.user }}"
        ansible_connection: "{{ item.ansible_connection | default('ssh') }}"
        groups: k3s_servers
        k3s_token: "{{ k3s_token }}"
      loop: "{{ k3s_servers }}"

    - name: Add k3s worker nodes to inventory  
      add_host:
        name: "{{ item.name }}"
        ansible_host: "{{ item.ip }}"
        ansible_user: "{{ item.user }}"
        groups: k3s_workers
        k3s_token: "{{ k3s_token }}"
      loop: "{{ k3s_workers }}"

    # Debug inventory creation
    - name: Debug created inventory
      debug:
        msg:
          - "k3s_servers group: {{ groups['k3s_servers'] | default(['not_defined']) }}"
          - "k3s_workers group: {{ groups['k3s_workers'] | default(['not_defined']) }}"
          - "Total servers: {{ groups['k3s_servers'] | default([]) | length }}"
          - "Total workers: {{ groups['k3s_workers'] | default([]) | length }}"
          - "Initial master will be: {{ groups['k3s_servers'][0] | default('not_defined') }}"
          - "Cleanup k3s: {{ cleanup_k3s }}"

# Test connectivity to all nodes
- name: Test connectivity to all nodes
  hosts: k3s_servers:k3s_workers
  gather_facts: false
  tasks:
    - name: Test connection and gather basic info
      setup:
        gather_subset: min
      register: connection_test
      ignore_errors: true

    - name: Display host information
      debug:
        msg: "Host {{ inventory_hostname }} connection test completed"

# Cleanup existing k3s installations (always enabled)
- name: Cleanup existing k3s installations
  hosts: k3s_servers:k3s_workers
  become: true
  tasks:
    - name: Stop k3s services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      with_items:
        - k3s
        - k3s-agent
      ignore_errors: true

    - name: Run k3s uninstall script (servers)
      shell: /usr/local/bin/k3s-uninstall.sh
      ignore_errors: true
      when: 
        - inventory_hostname in groups['k3s_servers']

    - name: Run k3s agent uninstall script (workers)
      shell: /usr/local/bin/k3s-agent-uninstall.sh
      ignore_errors: true
      when: 
        - inventory_hostname in groups['k3s_workers'] | default([])

# Execute k3s installation on all nodes
- name: Install and configure k3s cluster
  hosts: k3s_servers:k3s_workers
  gather_facts: true
  become: true
  roles:
    - k3s
